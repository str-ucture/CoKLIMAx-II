{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "23ebf1ed",
   "metadata": {},
   "source": [
    "# Lake Water Levels derived from Satellite Data\n",
    "\n",
    "The water levels of large lakes are an indicator of fluctuations in the hydrological balance of a region and are classified as an Essential Climate Variable (ECV).\n",
    "\n",
    "**The indicator is significant for many applications:**\n",
    "\n",
    "* **As an indicator of precipitation and evaporation changes**: Water levels respond to changes in a lakeâ€™s water balance, which is determined by precipitation, evaporation, and runoff.\n",
    "* **Linking to temperature trends**: Rising temperatures increase evaporation, which can lead to declining water levels.\n",
    "* **Storage in hydrological cycles and water resources**: Lakes are important freshwater reservoirs, and their levels influence drinking water supply, agriculture, and energy production (e.g., hydropower).\n",
    "* **Direct impact on ecosystems**: Changes in water levels affect aquatic and terrestrial ecosystems, for example, by altering habitats for flora and fauna.\n",
    "* **In connection with extreme events**: Water levels respond to droughts, heavy rainfall events, and glacier melt, making them important indicators of climatic extreme events.\n",
    "\n",
    "The dataset used in this notebook provides water level information for 251 lakes across four continents, derived from satellite-based radar altimetry. This data represents a cost-effective alternative to traditional ground-based systems. The data is produced by the Copernicus Land Service (CLS) for the Copernicus Climate Change Service to improve hydrological and climatic monitoring of lakes on a continental scale.\n",
    "\n",
    "**The learning objectives of this notebook are:**\n",
    "\n",
    "* [Download and Extract the Dataset](#download-and-extract-the-dataset)\n",
    "    * Extract data for Lake Constance\n",
    "    * Unpack the downloaded file\n",
    "* [Examine the metadata of the netCDF4 file](#investigate-the-metadata-of-the-netcdf4-file)\n",
    "* [Export the time series in CSV format](#export-the-time-series-in-csv-format)\n",
    "* [Analysis and Visualization](#analysis-and-visualization-options)\n",
    "\n",
    "**Information on Dataset:**\n",
    "* Source: [Satellite Lake Water Levels](https://cds.climate.copernicus.eu/datasets/satellite-lake-water-level?tab=overview)\n",
    "* Author: T. Tewes (City of Konstanz)\n",
    "* Notebook Version: 1.4 (Updated: January 17, 2025)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dacce046",
   "metadata": {},
   "source": [
    "## 1. Specifying the paths and working directories"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "a74e11ed",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "\n",
    "''' ---- Specify Directories Here ---- '''\n",
    "download_folder = r\".\\data\\satellite-lake-water-level\\download\"\n",
    "working_folder = r\".\\data\\satellite-lake-water-level\\working\"\n",
    "geotiff_folder = r\".\\data\\satellite-lake-water-level\\geotiff\"\n",
    "csv_folder = r\".\\data\\satellite-lake-water-level\\csv\"\n",
    "output_folder = r\".\\data\\satellite-lake-water-level\\output\"\n",
    "''' ----- End of Declaration ---- '''\n",
    "\n",
    "os.makedirs(download_folder, exist_ok=True)\n",
    "os.makedirs(working_folder, exist_ok=True)\n",
    "os.makedirs(geotiff_folder, exist_ok=True)\n",
    "os.makedirs(csv_folder, exist_ok=True)\n",
    "os.makedirs(output_folder, exist_ok=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4aadd695",
   "metadata": {},
   "source": [
    "## 2. Download and Extract the Dataset"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d9519e01",
   "metadata": {},
   "source": [
    "### 2.1 Authentication"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "507616bf",
   "metadata": {},
   "outputs": [],
   "source": [
    "import cdsapi\n",
    "\n",
    "def main():\n",
    "    # API key for authentication\n",
    "    api_key = \"fdae60fd-35d4-436f-825c-c63fedab94a4\"\n",
    "    api_url = \"https://cds.climate.copernicus.eu/api\"\n",
    "\n",
    "    # Creation of the CDS API client\n",
    "    client = cdsapi.Client(url=api_url, key=api_key)\n",
    "    return client"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "233eefdd",
   "metadata": {},
   "source": [
    "### 2.2 Define the \"request\" and Download the Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a199e44d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Definition of the dataset and the request parameters\n",
    "dataset = \"satellite-lake-water-level\"\n",
    "request = {\n",
    "    \"variable\": \"all\",\n",
    "    \"region\": [\"southern_europe\"],\n",
    "    \"lake\": [\"bodensee\"]\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cff16f16",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Execute it to download the dataset:\n",
    "def main_retrieve():\n",
    "    dataset_filename = f\"{dataset}_bodensee.zip\"\n",
    "    dataset_filepath = os.path.join(download_folder, dataset_filename)\n",
    "\n",
    "    # Download the dataset only if the dataset has not been downloaded before\n",
    "    if not os.path.isfile(dataset_filepath):\n",
    "        # Call the CDS client only if the dataset has not been downloaded before\n",
    "        client = main()\n",
    "        # Download the dataset with the defined request parameters\n",
    "        client.retrieve(dataset, request, dataset_filepath)\n",
    "    else:\n",
    "        print(\"Dataset already downloaded.\")\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main_retrieve()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "da2004d3",
   "metadata": {},
   "source": [
    "### 2.3 Extract the ZIP files in folder(s)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fbd55870",
   "metadata": {},
   "outputs": [],
   "source": [
    "import zipfile\n",
    "\n",
    "# Create the file name and file path for the dataset's ZIP file\n",
    "dataset_filename = f\"{dataset}_bodensee.zip\"\n",
    "dataset_filepath = os.path.join(download_folder, dataset_filename)\n",
    "extract_folder = working_folder\n",
    "\n",
    "# Extract the ZIP file\n",
    "try:\n",
    "    if not os.listdir(extract_folder):\n",
    "        with zipfile.ZipFile(dataset_filepath, 'r') as zip_ref:\n",
    "            zip_ref.extractall(extract_folder)\n",
    "            print(f\"Successfully extracted files to: {extract_folder}\")\n",
    "    else:\n",
    "        print(\"Folder is not empty. Skipping extraction.\")\n",
    "except FileNotFoundError:\n",
    "    print(f\"Error: The file {dataset_filepath} was not found.\")\n",
    "except zipfile.BadZipFile:\n",
    "    print(f\"Error: The file {dataset_filepath} is not a valid zip file.\")\n",
    "except Exception as e:\n",
    "    print(f\"An unexpected error occurred: {e}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "419d8a9d",
   "metadata": {},
   "source": [
    "## 3. Investigate the Metadata of the NetCDF4 file"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b85e1dd0",
   "metadata": {},
   "outputs": [],
   "source": [
    "import netCDF4 as nc\n",
    "\n",
    "# Open the NetCDF file in read mode\n",
    "nc_filepath = os.path.join(extract_folder, os.listdir(extract_folder)[0])\n",
    "nc_dataset = nc.Dataset(nc_filepath, mode='r')\n",
    "\n",
    "# List all variables in the dataset\n",
    "variables_list = nc_dataset.variables.keys()\n",
    "print(f\"Available variables: {list(variables_list)}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3b2a6822",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Define variable name from available variables and read variable data\n",
    "variable_name = 'water_surface_height_above_reference_datum'\n",
    "variable_data = nc_dataset[variable_name]\n",
    "\n",
    "# Create a summary of the primary variables\n",
    "summary = {\n",
    "    \"Variable Name\": variable_name,\n",
    "    \"Data Type\": variable_data.dtype,\n",
    "    \"Shape\": variable_data.shape,\n",
    "    \"Variable Info\": f\"{variable_data.dimensions}\",\n",
    "    \"Units\": getattr(variable_data, \"units\", \"N/A\"),\n",
    "    \"Long Name\": getattr(variable_data, \"long_name\", \"N/A\"),\n",
    "}\n",
    "\n",
    "# Display the summary of the data set as a DataFrame for better visualisation\n",
    "nc_summary = pd.DataFrame(list(summary.items()), columns=['Description', 'Details'])\n",
    "\n",
    "# Display the summary DataFrame\n",
    "nc_summary"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a3b47334",
   "metadata": {},
   "source": [
    "## 4. Export the time series in CSV Format"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ebdd2eb6",
   "metadata": {},
   "source": [
    "### 4.1 Define a Function to Compute Daily Average"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6316175b",
   "metadata": {},
   "outputs": [],
   "source": [
    "import xarray as xr\n",
    "\n",
    "# Function to convert NetCDF data to a pandas DataFrame\n",
    "def netcdf_to_dataframe(nc_file):\n",
    "    \"\"\"\n",
    "    Converts NetCDF data containing water surface height and its uncertainty\n",
    "    into a Pandas DataFrame.\n",
    "\n",
    "    Parameters:\n",
    "    nc_file (str): Path to the NetCDF file.\n",
    "\n",
    "    Returns:\n",
    "    pd.DataFrame: A DataFrame containing water surface height, uncertainty, and\n",
    "                  corresponding metadata (e.g., time and spatial coordinates).\n",
    "    \"\"\"\n",
    "    # Open the NetCDF file as an xarray Dataset\n",
    "    with xr.open_dataset(nc_file) as nc_dataset:\n",
    "        # Extract the variable data for water surface height above reference datum\n",
    "        variable_data_water_surface_height = nc_dataset['water_surface_height_above_reference_datum']\n",
    "\n",
    "        # Extract the variable for water surface height uncertainty\n",
    "        variable_data_water_surface_height_uncertainty = nc_dataset['water_surface_height_uncertainty']\n",
    "\n",
    "        # Convert the xarray dataset to a DataFrame\n",
    "        df = variable_data_water_surface_height.to_dataframe()\n",
    "\n",
    "        # Merge the uncertainty data into the main DataFrame\n",
    "        df['uncertainty'] = variable_data_water_surface_height_uncertainty.to_dataframe()\n",
    "\n",
    "        return df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "74bd8a82",
   "metadata": {},
   "source": [
    "### 4.2 Create DataFrame and Export as CSV"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a393d716",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define csv filename and filepath for the output\n",
    "csv_filename = f\"{dataset}.csv\"\n",
    "csv_filepath = os.path.join(csv_folder, csv_filename)\n",
    "\n",
    "# Export the pivot table as CSV if it does not already exist\n",
    "if not os.path.isfile(csv_filepath):\n",
    "    dataframe = netcdf_to_dataframe(nc_file=nc_filepath)\n",
    "    dataframe.to_csv(csv_filepath, sep=',', encoding='utf8')\n",
    "    print(f\"Filtered data exported successfully to {csv_filepath}\")\n",
    "\n",
    "else:\n",
    "    print(f\"File already exists at {csv_filepath}.\\nSkipping export.\")\n",
    "    print(\"Reading existing CSV file...\")\n",
    "    # Read the CSV file with datetime parsing\n",
    "    dataframe = pd.read_csv(csv_filepath, parse_dates=['time'], index_col='time')\n",
    "\n",
    "# Modify pandas display options\n",
    "pd.options.display.float_format = '{:,.2f}'.format\n",
    "    \n",
    "# Display DataFrame\n",
    "dataframe.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "520c2871",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Find the index labels for the maximum and minimum values\n",
    "max_index_label = dataframe['water_surface_height_above_reference_datum'].idxmax()\n",
    "min_index_label = dataframe['water_surface_height_above_reference_datum'].idxmin()\n",
    "\n",
    "# Retrieve the rows corresponding to the maximum and minimum values\n",
    "max_row = dataframe.loc[max_index_label]\n",
    "min_row = dataframe.loc[min_index_label]\n",
    "\n",
    "# Format the index labels to show only the date part\n",
    "max_date_str = max_index_label.strftime('%Y-%m-%d')\n",
    "min_date_str = min_index_label.strftime('%Y-%m-%d')\n",
    "\n",
    "# Print the results\n",
    "print(f\"1. Maximum Water Surface Height: ({max_date_str})\")\n",
    "print(max_row.to_frame().T.to_string(index=False))\n",
    "print()\n",
    "\n",
    "print(f\"2. Minimum Water Surface Height: ({min_date_str})\")\n",
    "print(min_row.to_frame().T.to_string(index=False))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0a97ace6",
   "metadata": {},
   "source": [
    "## 5. Analysis and Visualization Options"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "acecafbe",
   "metadata": {},
   "source": [
    "### 5.1 Visualization of all data (without a map)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cbf3a13f",
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "from matplotlib.dates import DateFormatter, YearLocator, MonthLocator\n",
    "import matplotlib.ticker as ticker\n",
    "\n",
    "# Create the figure and axes\n",
    "fig, ax = plt.subplots(figsize=(12, 6), facecolor='#f1f1f1', edgecolor='k')\n",
    "\n",
    "# Plot the water level data\n",
    "ax.plot(\n",
    "    dataframe.index,\n",
    "    dataframe['water_surface_height_above_reference_datum'],\n",
    "    marker='o',\n",
    "    linestyle='-',\n",
    "    color='#1877F2',\n",
    "    label=\"Water Level\",\n",
    ")\n",
    "\n",
    "# Format the x-axis for better readability\n",
    "ax.xaxis.set_major_locator(YearLocator())  # Major ticks for each year\n",
    "ax.xaxis.set_minor_locator(MonthLocator())  # Minor ticks for each month\n",
    "ax.xaxis.set_major_formatter(DateFormatter('%Y')) \n",
    "ax.tick_params(axis='x', which='major', length=4, direction='inout', width=2)\n",
    "ax.tick_params(axis='x', which='minor', length=3, direction='inout')\n",
    "\n",
    "# Set y-axis limits\n",
    "ax.set_ylim(393.5, 396.5)\n",
    "\n",
    "# Set axis labels and chart title\n",
    "ax.set_xlabel('Year', fontsize=12)\n",
    "ax.set_ylabel('Water Level (m)', fontsize=12)\n",
    "ax.set_title('Water Level of Lake Constance', fontsize=14, fontweight='bold')\n",
    "\n",
    "# Add grid to the plot and format y-axis\n",
    "ax.grid(visible=True, color='#b0b0b0', linestyle='--', linewidth=0.8, alpha=0.6)\n",
    "ax.yaxis.set_major_formatter(ticker.FormatStrFormatter('%0.2f'))\n",
    "\n",
    "# Add description and source information\n",
    "plt.figtext(\n",
    "    0.4,\n",
    "    -0.05,\n",
    "    (\n",
    "        'Description: Lake water level of Lake Constance, determined from satellite data from the CDS.\\n'\n",
    "        'Source: Copernicus Climate Change Service, Climate Data Store, (2020): Lake water levels from 1992 '\n",
    "        'to present derived from satellite observations. Copernicus Climate Change Service (C3S) Climate Data Store (CDS). \\n'\n",
    "        'DOI: 10.24381/cds.5714c668 (Accessed on 16-10-2024)'\n",
    "    ),\n",
    "    ha='left',\n",
    "    va='center',\n",
    "    fontsize=9,\n",
    "    wrap=True,\n",
    "    backgroundcolor='w',\n",
    ")\n",
    "\n",
    "# Adjust layout and display the plot\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6a068f74",
   "metadata": {},
   "source": [
    "### 5.2 Visualization of monthly averages (without a map)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6fe6869b-d711-48c5-a9be-7994cdc6d50a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Group the data by month and calculate the mean, standard deviation and sample size\n",
    "monthly_data = dataframe.assign(month=dataframe.index.month).groupby('month')['water_surface_height_above_reference_datum']\n",
    "# Now you can calculate mean, std, and count\n",
    "monthly_mean = monthly_data.mean()\n",
    "monthly_std = monthly_data.std()\n",
    "monthly_n = monthly_data.count()\n",
    "\n",
    "# Define the month labels and corresponding numerical range\n",
    "month_labels = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n",
    "months = range(1, 13)\n",
    "\n",
    "# Create the bar chart\n",
    "fig, ax = plt.subplots(figsize=(12, 6), facecolor='#f1f1f1', edgecolor='k')\n",
    "\n",
    "# Plot bars with standard deviation as error bars\n",
    "bars = ax.bar(\n",
    "    months, \n",
    "    monthly_mean, \n",
    "    yerr=monthly_std, \n",
    "    capsize=5, \n",
    "    color='skyblue', \n",
    "    alpha=0.7, \n",
    "    error_kw=dict(ecolor='black', lw=1.5)\n",
    ")\n",
    "\n",
    "# Set the Y-axis range dynamically based on data\n",
    "y_min = max(0, monthly_mean.min() - monthly_std.max() - 0.5)\n",
    "y_max = monthly_mean.max() + monthly_std.max() + 0.5\n",
    "ax.set_ylim(y_min, y_max)\n",
    "\n",
    "# Set axis labels and chart title\n",
    "ax.set_xlabel('Month', fontsize=12)\n",
    "ax.set_ylabel('Average Water Level (m)', fontsize=12)\n",
    "ax.set_title('Monthly mean Water Level of Lake Constance with Standard Deviation', fontsize=14, fontweight='bold')\n",
    "\n",
    "# Set X-axis labels (1 = January, 12 = December)\n",
    "ax.set_xticks(months)\n",
    "ax.set_xticklabels(month_labels)\n",
    "\n",
    "# Add sample size (n) annotations above each bar\n",
    "for bar, n in zip(bars, monthly_n):\n",
    "    height = bar.get_height()\n",
    "    ax.text(\n",
    "        bar.get_x() + bar.get_width() / 2,\n",
    "        height + 0.1,\n",
    "        f'n={n}',\n",
    "        ha='center',\n",
    "        va='bottom',\n",
    "        fontsize=9,\n",
    "        color='black'\n",
    "    )\n",
    "    \n",
    "# Add a grid to the chart\n",
    "ax.grid(visible=True, color='#b0b0b0', linestyle='--', linewidth=0.8, alpha=0.6)\n",
    "ax.yaxis.set_major_formatter(ticker.FormatStrFormatter('%0.2f'))\n",
    "\n",
    "# Add description and source information\n",
    "plt.figtext(\n",
    "    0.4,\n",
    "    -0.05,\n",
    "    (\n",
    "        'Description: Water level of Lake Constance, determined from satellite data from the CDS.\\n'\n",
    "        'Source: Copernicus Climate Change Service, Climate Data Store, (2020): Lake water levels from 1992 '\n",
    "        'to present derived from satellite observation. Copernicus Climate Change Service (C3S) Climate Data '\n",
    "        'Store (CDS). DOI: 10.24381/cds.5714c668 (Accessed on 16-10-2024)'\n",
    "    ),\n",
    "    ha='left',\n",
    "    va='center',\n",
    "    fontsize=9,\n",
    "    wrap=True,\n",
    "    backgroundcolor='w',\n",
    ")\n",
    "\n",
    "# Adjust layout and display the plot\n",
    "plt.tight_layout()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1b5b1292",
   "metadata": {},
   "source": [
    "### 5.3 Visualization of all data (with a map)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a2406724",
   "metadata": {},
   "outputs": [],
   "source": [
    "import geopandas as gpd\n",
    "from shapely.geometry import Point\n",
    "import contextily as ctx \n",
    "\n",
    "# Define the point for Lake Constance (approx. coordinates)\n",
    "bodensee_point = Point(nc_dataset['lon'][:][0], nc_dataset['lat'][:][0])\n",
    "\n",
    "# Create a GeoDataFrame with the Lake Constance point\n",
    "lake_bodensee = gpd.GeoDataFrame(\n",
    "    {'geometry': [bodensee_point]},\n",
    "    crs='EPSG:4326'  # WGS84-Coordinate System\n",
    ")\n",
    "\n",
    "# Project into the Web Mercator coordinate system\n",
    "lake_bodensee = lake_bodensee.to_crs(epsg=3857)\n",
    "\n",
    "# Create the figure and axes\n",
    "fig, axs = plt.subplots(1,2, figsize=(14, 6), facecolor='#f1f1f1', edgecolor='k', gridspec_kw={'width_ratios': [1, 1.5]})\n",
    "\n",
    "# --- 1. Map of Lake Constance ---\n",
    "ax = axs[0]\n",
    "lake_bodensee.plot(ax=ax, color='cyan', markersize=50)\n",
    "ctx.add_basemap(ax, source=ctx.providers.Esri.WorldImagery)\n",
    "\n",
    "# Adjust the visible area (zoom out further)\n",
    "# Increase the area for more surroundings (here to 100 km in each direction)\n",
    "ax.set_xlim(lake_bodensee.geometry.x.min() - 80000, lake_bodensee.geometry.x.max() + 80000) # Increase the area in the x direction\n",
    "ax.set_ylim(lake_bodensee.geometry.y.min() - 80000, lake_bodensee.geometry.y.max() + 80000) # Increase the area in the y direction\n",
    "\n",
    "ax.set_title(\"Lake Constance (Satellite Image)\")\n",
    "ax.set_axis_off() # Remove axis labels\n",
    "\n",
    "# --- 2. Diagram of water level ---\n",
    "ax = axs[1]\n",
    "\n",
    "# Plot the water level data\n",
    "ax.plot(\n",
    "    dataframe.index,\n",
    "    dataframe['water_surface_height_above_reference_datum'],\n",
    "    marker='o',\n",
    "    linestyle='-',\n",
    "    color='#1877F2',\n",
    "    label=\"Water Level\",\n",
    ")\n",
    "\n",
    "# Format the x-axis for better readability\n",
    "ax.xaxis.set_major_locator(YearLocator())  # Major ticks for each year\n",
    "ax.xaxis.set_minor_locator(MonthLocator())  # Minor ticks for each month\n",
    "ax.xaxis.set_major_formatter(DateFormatter('%Y'))\n",
    "ax.tick_params(axis='x', which='major', length=4, direction='inout', width=2)\n",
    "ax.tick_params(axis='x', which='minor', length=3, direction='inout')\n",
    "\n",
    "# Set y-axis limits\n",
    "ax.set_ylim(393.5, 396.5)\n",
    "\n",
    "# Set axis labels and chart title\n",
    "ax.set_xlabel('Year', fontsize=12)\n",
    "ax.set_ylabel('Water Level (m)', fontsize=12)\n",
    "ax.set_title('Water Level of Lake Constance', fontsize=14, fontweight='bold')\n",
    "\n",
    "# Add grid to the plot and format y-axis\n",
    "ax.grid(visible=True, color='#b0b0b0', linestyle='--', linewidth=0.8, alpha=0.6)\n",
    "ax.yaxis.set_major_formatter(ticker.FormatStrFormatter('%0.2f'))\n",
    "\n",
    "# Add description and source information\n",
    "plt.figtext(\n",
    "    0.4,\n",
    "    -0.05,\n",
    "    (\n",
    "        'Description: Water level of Lake Constance, determined from satellite data from the CDS.\\n'\n",
    "        'Source: Copernicus Climate Change Service, Climate Data Store, (2020): Lake water levels from 1992 '\n",
    "        'to present derived from satellite observation. Copernicus Climate Change Service (C3S) Climate Data '\n",
    "        'Store (CDS). DOI: 10.24381/cds.5714c668 (Accessed on 16-10-2024)'\n",
    "    ),\n",
    "    ha='left',\n",
    "    va='center',\n",
    "    fontsize=9,\n",
    "    wrap=True,\n",
    "    backgroundcolor='w',\n",
    ")\n",
    "\n",
    "# Adjust layout and display the plot\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e093f91f",
   "metadata": {},
   "source": [
    "### 5.4 Visualization of monthly average (with a map)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8928ebc9",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create the figure and the axes\n",
    "fig, axs = plt.subplots(1,2, figsize=(14, 6), facecolor='#f1f1f1', edgecolor='k', gridspec_kw={'width_ratios': [1, 1.5]})\n",
    "\n",
    "# --- 1. Map of Lake Constance ---\n",
    "ax = axs[0]\n",
    "lake_bodensee.plot(ax=ax, color='cyan', markersize=50)\n",
    "ctx.add_basemap(ax, source=ctx.providers.Esri.WorldImagery)\n",
    "\n",
    "# Adjust the visible area (zoom out further)\n",
    "# Increase the area for more surroundings (here to 100 km in each direction)\n",
    "ax.set_xlim(lake_bodensee.geometry.x.min() - 80000, lake_bodensee.geometry.x.max() + 80000) # Increase the area in the x direction\n",
    "ax.set_ylim(lake_bodensee.geometry.y.min() - 80000, lake_bodensee.geometry.y.max() + 80000) # Increase the area in the y direction\n",
    "\n",
    "ax.set_title(\"Lake Constance (Satellite Image)\")\n",
    "ax.set_axis_off() # Remove axis labels\n",
    "\n",
    "# --- 2. Diagram of water level ---\n",
    "ax = axs[1]\n",
    "\n",
    "# Plot bars with standard deviation as error bars\n",
    "bars = ax.bar(\n",
    "    months, \n",
    "    monthly_mean, \n",
    "    yerr=monthly_std, \n",
    "    capsize=5, \n",
    "    color='skyblue', \n",
    "    alpha=0.7, \n",
    "    error_kw=dict(ecolor='black', lw=1.5)\n",
    ")\n",
    "\n",
    "# Set the Y-axis range dynamically based on data\n",
    "y_min = max(0, monthly_mean.min() - monthly_std.max() - 0.5)\n",
    "y_max = monthly_mean.max() + monthly_std.max() + 0.5\n",
    "ax.set_ylim(y_min, y_max)\n",
    "\n",
    "# Set axis labels and chart title\n",
    "ax.set_xlabel('Month', fontsize=12)\n",
    "ax.set_ylabel('Average Water Level (m)', fontsize=12)\n",
    "ax.set_title('Monthly mean Water Level of Lake Constance with Standard Deviation', fontsize=14, fontweight='bold')\n",
    "\n",
    "# Set X-axis labels (1 = January, 12 = December)\n",
    "ax.set_xticks(months)\n",
    "ax.set_xticklabels(month_labels)\n",
    "\n",
    "# Add sample size (n) annotations above each bar\n",
    "for bar, n in zip(bars, monthly_n):\n",
    "    height = bar.get_height()\n",
    "    ax.text(\n",
    "        bar.get_x() + bar.get_width() / 2,\n",
    "        height + 0.1,\n",
    "        f'n={n}',\n",
    "        ha='center',\n",
    "        va='bottom',\n",
    "        fontsize=9,\n",
    "        color='black'\n",
    "    )\n",
    "    \n",
    "# Add grid to the plot and format y-axis\n",
    "ax.grid(visible=True, color='#b0b0b0', linestyle='--', linewidth=0.8, alpha=0.6)\n",
    "ax.yaxis.set_major_formatter(ticker.FormatStrFormatter('%0.2f'))\n",
    "    \n",
    "# Add description and source information\n",
    "plt.figtext(\n",
    "    0.4,\n",
    "    -0.05,\n",
    "    (\n",
    "        'Description: Water level of Lake Constance, determined from satellite data from the CDS.\\n'\n",
    "        'Source: Copernicus Climate Change Service, Climate Data Store, (2020): Lake water levels from 1992 '\n",
    "        'to present derived from satellite observation. Copernicus Climate Change Service (C3S) Climate Data '\n",
    "        'Store (CDS). DOI: 10.24381/cds.5714c668 (Accessed on 16-10-2024)'\n",
    "    ),\n",
    "    ha='left',\n",
    "    va='center',\n",
    "    fontsize=9,\n",
    "    wrap=True,\n",
    "    backgroundcolor='w',\n",
    ")\n",
    "\n",
    "# Adjust layout and display the plot\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "myenv",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.16"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {},
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
