Traceback (most recent call last):
  File "C:\Users\ShaileshShrestha\anaconda3\envs\cds_env\lib\site-packages\jupyter_cache\executors\utils.py", line 58, in single_nb_execution
    executenb(
  File "C:\Users\ShaileshShrestha\anaconda3\envs\cds_env\lib\site-packages\nbclient\client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "C:\Users\ShaileshShrestha\anaconda3\envs\cds_env\lib\site-packages\jupyter_core\utils\__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
  File "C:\Users\ShaileshShrestha\anaconda3\envs\cds_env\lib\asyncio\base_events.py", line 649, in run_until_complete
    return future.result()
  File "C:\Users\ShaileshShrestha\anaconda3\envs\cds_env\lib\site-packages\nbclient\client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "C:\Users\ShaileshShrestha\anaconda3\envs\cds_env\lib\site-packages\nbclient\client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "C:\Users\ShaileshShrestha\anaconda3\envs\cds_env\lib\site-packages\nbclient\client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import xarray as xr
import calmap
import matplotlib.pyplot as plt
import pandas as pd
import math as ma

def plot_calendarplot(year=None):
    # NetCDF-Datei fÃ¼r das angegebene Jahr filtern
    nc_file = next((item for item in nc_files if item['year'] == str(year)), None)

    if not nc_file:
        print(f"Keine NetCDF-Datei fÃ¼r das angegebene Jahr gefunden.")
        print("Das neueste verfÃ¼gbare Jahr wird ausgewÃ¤hlt.")
        if nc_files:
            nc_file = nc_files[-1]  # Das neueste verfÃ¼gbare Jahr auswÃ¤hlen
            print(f"Es werden Daten aus dem Jahr {nc_file['year']} verwendet.")
        else:
            print("Keine NetCDF-Dateien verfÃ¼gbar.")
            return

    # Die NetCDF-Datei Ã¶ffnen und die angegebene Variable verarbeiten
    with xr.open_dataset(nc_file['path']) as nc_dataset:
        # Variablendaten als DataFrame extrahieren
        variable_data = nc_dataset[nc_file['variable_name']]
        df = variable_data.to_dataframe().reset_index().dropna().reset_index(drop=True)

        # 'time' in das Datetime-Format konvertieren und 'day_of_year' sowie 'date' ableiten
        df['time'] = pd.to_datetime(df['time'])
        df['day_of_year'] = df['time'].dt.dayofyear
        df['date'] = df['time'].dt.year.astype(str) + '-' + df['day_of_year'].astype(str).str.zfill(3)
        df['date'] = pd.to_datetime(df['date'], format='%Y-%j').dt.strftime('%Y-%m-%d')

        # Nach 'date' gruppieren und den tÃ¤glichen Mittelwert fÃ¼r die Variable berechnen
        df2 = df.groupby('date')[variable_name].mean()

    # Sicherstellen, dass der Index des Ergebnisses ein datetime-Format hat
    df2.index = pd.to_datetime(df2.index)

    # Kalender-Heatmap der mittleren Temperaturwerte plotten
    fig, axs = calmap.calendarplot(df2,
                                fig_kws={'figsize': (12, 8)},
                                yearlabel_kws={'color': 'black', 'fontsize': 22},
                                subplot_kws={'title': f'Kalender-Heatmap von {variable_name} fÃ¼r {year}'},
                                cmap='YlGnBu',
                                fillcolor='#efefef',
                                daylabels='MTWTFSS',
                                linecolor='#ffffff',
                                dayticks=True,
                                )

    # # Gitternetzlinien entfernen
    for ax in axs.flatten():
        ax.grid(False) 

    # Farbleiste rechts neben dem Diagramm hinzufÃ¼gen
    cax = fig.add_axes([1.005, 0.38, 0.02, 0.2])
    vmin = ma.floor(df2.min() // 5 * 5)
    vmax = ma.ceil(df2.max() // 5 * 5)

    sm = plt.cm.ScalarMappable(cmap='YlGnBu', norm=plt.Normalize(vmin=vmin, vmax=vmax))
    cbar = fig.colorbar(sm, cax=cax)

    # Ticks auf der Farbleiste anpassen
    tick_interval = 5
    ticks = np.arange(vmin, vmax + 1, tick_interval)
    cbar.set_ticks(ticks)  # Ticks setzen
    cbar.set_ticklabels(ticks)

if __name__ == "__main__":
    # Kalender-Heatmap fÃ¼r das angegebene Jahr plotten
    plot_calendarplot(year=1990)
    plot_calendarplot(year=2005)

------------------


[1;31m---------------------------------------------------------------------------[0m
[1;31mModuleNotFoundError[0m                       Traceback (most recent call last)
Cell [1;32mIn[21], line 2[0m
[0;32m      1[0m [38;5;28;01mimport[39;00m[38;5;250m [39m[38;5;21;01mxarray[39;00m[38;5;250m [39m[38;5;28;01mas[39;00m[38;5;250m [39m[38;5;21;01mxr[39;00m
[1;32m----> 2[0m [38;5;28;01mimport[39;00m[38;5;250m [39m[38;5;21;01mcalmap[39;00m
[0;32m      3[0m [38;5;28;01mimport[39;00m[38;5;250m [39m[38;5;21;01mmatplotlib[39;00m[38;5;21;01m.[39;00m[38;5;21;01mpyplot[39;00m[38;5;250m [39m[38;5;28;01mas[39;00m[38;5;250m [39m[38;5;21;01mplt[39;00m
[0;32m      4[0m [38;5;28;01mimport[39;00m[38;5;250m [39m[38;5;21;01mpandas[39;00m[38;5;250m [39m[38;5;28;01mas[39;00m[38;5;250m [39m[38;5;21;01mpd[39;00m

[1;31mModuleNotFoundError[0m: No module named 'calmap'

