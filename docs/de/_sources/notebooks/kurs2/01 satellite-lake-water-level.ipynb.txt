{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "23ebf1ed",
   "metadata": {},
   "source": [
    "# Wasserstände von Seen abgleitet aus Satellitendaten\n",
    "\n",
    "Die Wasserstände großer Seen sind ein Indikator für Schwankungen im hydrologischen Haushalt einer Region und werden als essentielle Klimavariable (Essential Climate Variable, ECV) eingestuft.\n",
    "\n",
    "**Der Indikator ist für viele Einsatzfelder bedeutsam:**\n",
    "\n",
    "* **Als Indikator für Niederschlags- und Verdunstungsänderungen**: Wasserstände reagieren auf Veränderungen in der Wasserbilanz eines Sees, die durch Niederschlag, Verdunstung und Abfluss bestimmt wird.\n",
    "* **Zur Verknüpfung mit Temperaturtrends**: Steigende Temperaturen erhöhen die Verdunstung, was zu sinkenden Wasserständen führen kann.\n",
    "* **Speicher in hydrologischen Kreisläufen und Wasserressourcen**: Seen sind bedeutende Süßwasserspeicher, und ihre Pegelstände beeinflussen die Trinkwasserversorgung, Landwirtschaft und Energieproduktion (z. B. Wasserkraft).\n",
    "* **Direkter Einfluss auf Ökosysteme**: Änderungen der Wasserstände haben Auswirkungen auf aquatische und terrestrische Ökosysteme, z. B. durch veränderte Lebensräume für Flora und Fauna.\n",
    "* **In der Verbindung mit Extremereignissen**: Wasserstände reagieren auf Dürren, Starkregenereignisse und Gletscherschmelze, was sie zu wichtigen Indikatoren für klimatische Extremereignisse macht.\n",
    "\n",
    "Der Datensatz, den Sie in diesem Notebook bearbeiten liefert Wasserstandsinformationen für 251 Seen auf vier Kontinenten, abgeleitet aus satellitenbasierter Radaraltimetrie. Die Informationen stellen eine kostengünstige Alternative zu traditionellen bodengestützten Systemen dar Die Daten werden vom Copernicus Land Service (CLS) für den Copernicus Climate Change Service erstellt, um die hydrologische und klimatische Überwachung von Seen auf kontinentaler Ebene zu verbessern.\n",
    "\n",
    "**In diesem Notebook sollen folgende Lernziele erarbeitet werden:**\n",
    "\n",
    "* [Herunterladen und Entpacken des Datensatzes](#herunterladen-und-entpacken-des-datensatzes)\n",
    "    * Extrahieren der Daten für den Bodensee\n",
    "    * Entpacken der heruntergeladenen Datei\n",
    "* [Untersuchen der Metadaten der netCDF4-Datei](#untersuchen-der-metadaten-der-netcdf4-datei)\n",
    "* [Exportieren der Zeitreihe im csv-Format](#exportieren-der-zeitreihe-im-csv-format)\n",
    "* [Analyse und Visualisierung](#analyse-und-visualisierungsmöglichkeiten)\n",
    "\n",
    "**Informationen zum Datensatz:**\n",
    "* Quelle: [Satellite Lake Water Levels](https://cds.climate.copernicus.eu/datasets/satellite-lake-water-level?tab=overview)\n",
    "* Autor: T. Tewes (Stadt Konstanz)\n",
    "* Notebook-Version: 1.4 (Aktualisiert: 17. Januar 2025)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dacce046",
   "metadata": {},
   "source": [
    "## 1. Festlegen der Pfade und Arbeitsverzeichnisse"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a74e11ed",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "\n",
    "''' ---- Verzeichnisse hier angeben ---- '''\n",
    "download_folder = r\".\\data\\satellite-lake-water-level\\download\"\n",
    "working_folder = r\".\\data\\satellite-lake-water-level\\working\"\n",
    "geotiff_folder = r\".\\data\\satellite-lake-water-level\\geotiff\"\n",
    "csv_folder = r\".\\data\\satellite-lake-water-level\\csv\"\n",
    "output_folder = r\".\\data\\satellite-lake-water-level\\output\"\n",
    "''' ----- Ende der Angaben ---- '''\n",
    "\n",
    "os.makedirs(download_folder, exist_ok=True)\n",
    "os.makedirs(working_folder, exist_ok=True)\n",
    "os.makedirs(geotiff_folder, exist_ok=True)\n",
    "os.makedirs(csv_folder, exist_ok=True)\n",
    "os.makedirs(output_folder, exist_ok=True)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c4fbb35",
   "metadata": {},
   "source": [
    "## 2. Herunterladen und Entpacken des Datensatzes"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d9519e01",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true
   },
   "source": [
    "### 2.1 Authentifizierung"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "507616bf",
   "metadata": {},
   "outputs": [],
   "source": [
    "import cdsapi\n",
    "\n",
    "def main():\n",
    "    # API-Schlüssel für die Authentifizierung\n",
    "    api_key = \"fdae60fd-35d4-436f-825c-c63fedab94a4\"\n",
    "    api_url = \"https://cds.climate.copernicus.eu/api\"\n",
    "    \n",
    "    # Erstellung des CDS-API-Clients\n",
    "    client = cdsapi.Client(url=api_url, key=api_key)\n",
    "    return client"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "233eefdd",
   "metadata": {},
   "source": [
    "### 2.2 Definieren Sie die \"request\" und laden Sie den Datensatz herunter"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a199e44d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Definition des Datensatzes und der Request-Parameter\n",
    "dataset = \"satellite-lake-water-level\"\n",
    "request = {\n",
    "    \"variable\": \"all\", \n",
    "    \"region\": [\"southern_europe\"],\n",
    "    \"lake\": [\"bodensee\"]\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cff16f16",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Führen Sie es aus, um den Datensatz herunterzuladen:\n",
    "def main_retrieve():\n",
    "    dataset_filename = f\"{dataset}_bodensee.zip\"\n",
    "    dataset_filepath = os.path.join(download_folder, dataset_filename)\n",
    "\n",
    "    # Den Datensatz nur herunterladen, wenn er noch nicht heruntergeladen wurde\n",
    "    if not os.path.isfile(dataset_filepath):\n",
    "        # Rufen Sie den CDS-Client nur auf, wenn der Datensatz noch nicht heruntergeladen wurde.\n",
    "        client = main()\n",
    "        # Den Datensatz mit den definierten Anforderungsparametern herunterladen\n",
    "        client.retrieve(dataset, request, dataset_filepath)\n",
    "    else:\n",
    "        print(\"Datensatz bereits heruntergeladen.\")\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main_retrieve()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "da2004d3",
   "metadata": {},
   "source": [
    "### 2.3 Entpacken des Zip-Ordners"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1e6bc1af",
   "metadata": {},
   "outputs": [],
   "source": [
    "import zipfile\n",
    "\n",
    "# Erstellen des Dateinamens und des Dateipfads für die ZIP-Datei des Datensatzes\n",
    "dataset_filename = f\"{dataset}_bodensee.zip\"\n",
    "dataset_filepath = os.path.join(download_folder, dataset_filename)\n",
    "extract_folder = working_folder\n",
    "\n",
    "# Entpacken der ZIP-Datei\n",
    "try:\n",
    "    if not os.listdir(extract_folder):\n",
    "        with zipfile.ZipFile(dataset_filepath, 'r') as zip_ref:\n",
    "            zip_ref.extractall(extract_folder)\n",
    "            print(f\"Dateien erfolgreich extrahiert nach: {extract_folder}\")\n",
    "    else:\n",
    "        print(\"Ordner ist nicht leer. Entpacken überspringen.\")\n",
    "except FileNotFoundError:\n",
    "    print(f\"Fehler: Die Datei {dataset_filepath} wurde nicht gefunden.\")\n",
    "except zipfile.BadZipFile:\n",
    "    print(f\"Fehler: Die Datei {dataset_filepath} ist keine gültige ZIP-Datei.\")\n",
    "except Exception as e:\n",
    "    print(f\"Ein unerwarteter Fehler ist aufgetreten: {e}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1be20e24",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true
   },
   "source": [
    "## 3. Untersuchen der Metadaten der netCDF4-Datei"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8491c236",
   "metadata": {},
   "outputs": [],
   "source": [
    "import netCDF4 as nc\n",
    "\n",
    "# Öffnen der NetCDF-Datei im Lesemodus\n",
    "nc_filepath = os.path.join(extract_folder, os.listdir(extract_folder)[0])\n",
    "nc_dataset = nc.Dataset(nc_filepath, mode='r')\n",
    "\n",
    "# Auflisten aller Variablen im Datensatz\n",
    "variables_list = nc_dataset.variables.keys()\n",
    "print(f\"Verfügbare Variablen: {list(variables_list)}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "131d71a3",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Variablennamen aus vorhandenen Variablen definieren und Variablendaten lesen\n",
    "variable_name = 'water_surface_height_above_reference_datum'\n",
    "variable_data = nc_dataset[variable_name]\n",
    "\n",
    "# Erstellen einer Zusammenfassung der Hauptvariablen\n",
    "summary = {\n",
    "    \"Variablenname\": variable_name,\n",
    "    \"Daten Typ\": variable_data.dtype,\n",
    "    \"Form\": variable_data.shape,\n",
    "    \"Variableninfo\": f\"{variable_data.dimensions}\",\n",
    "    \"Einheiten\": getattr(variable_data, \"units\", \"N/A\"),\n",
    "    \"Langer Name\": getattr(variable_data, \"long_name\", \"N/A\"),\n",
    "}\n",
    "\n",
    "# Anzeigen der Zusammenfassung des Datensatzes als DataFrame zur besseren Visualisierung\n",
    "nc_summary = pd.DataFrame(list(summary.items()), columns=['Beschreibung', 'Details'])\n",
    "\n",
    "# Anzeigen des Zusammenfassungs-DataFrames\n",
    "nc_summary"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e33ca986",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true
   },
   "source": [
    "## 4. Exportieren der Zeitreihe im csv-Format"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cca9e7b7",
   "metadata": {},
   "source": [
    "### 4.1 Definieren Sie eine Funktion zur Berechnung des Tagesdurchschnitts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fc0d3553",
   "metadata": {},
   "outputs": [],
   "source": [
    "import xarray as xr\n",
    "\n",
    "# Funktion zur Konvertierung von NetCDF-Daten in ein Pandas DataFrame\n",
    "def netcdf_to_dataframe(nc_file):\n",
    "    \"\"\"\n",
    "    Konvertiert NetCDF-Daten, die die Höhe der Wasseroberfläche und deren Unsicherheit enthalten, \n",
    "    in ein Pandas DataFrame.\n",
    "\n",
    "    Parameter:\n",
    "    nc_file (str): Pfad zur NetCDF-Datei.\n",
    "\n",
    "    Rückgabe:\n",
    "    pd.DataFrame: Ein DataFrame mit der Höhe der Wasseroberfläche, der Unsicherheit \n",
    "                  und den zugehörigen Metadaten (z. B. Zeit- und Raumkoordinaten).\n",
    "    \"\"\"\n",
    "    # Öffnen der NetCDF-Datei als xarray Dataset\n",
    "    with xr.open_dataset(nc_file) as nc_dataset:\n",
    "        # Extrahieren der Variablen für die Höhe der Wasseroberfläche über dem Referenzniveau\n",
    "        variable_data_water_surface_height = nc_dataset['water_surface_height_above_reference_datum']\n",
    "\n",
    "        # Extrahieren der Variablen für die Unsicherheit der Wasseroberflächenhöhe\n",
    "        variable_data_water_surface_height_uncertainty = nc_dataset['water_surface_height_uncertainty']\n",
    "\n",
    "        # Konvertieren des xarray Datasets in ein DataFrame\n",
    "        df = variable_data_water_surface_height.to_dataframe()\n",
    "\n",
    "        # Zusammenführen der Unsicherheitsdaten in das Haupt-DataFrame\n",
    "        df['uncertainty'] = variable_data_water_surface_height_uncertainty.to_dataframe()\n",
    "\n",
    "        return df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6b6ca0ce",
   "metadata": {},
   "source": [
    "### 4.2 Erstellen des DataFrames und Export als CSV"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "30f7039e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Definiere den CSV-Dateinamen und den Dateipfad für die Ausgabe\n",
    "csv_filename = f\"{dataset}.csv\"\n",
    "csv_filepath = os.path.join(csv_folder, csv_filename)\n",
    "\n",
    "# Exportiere die Pivot-Tabelle als CSV, falls sie noch nicht existiert\n",
    "if not os.path.isfile(csv_filepath):\n",
    "    dataframe = netcdf_to_dataframe(nc_file=nc_filepath)\n",
    "    dataframe.to_csv(csv_filepath, sep=',', encoding='utf8')\n",
    "    print(f\"Gefilterte Daten erfolgreich exportiert nach {csv_filepath}\")\n",
    "\n",
    "else:\n",
    "    print(f\"Datei existiert bereits unter {csv_filepath}.\\nÜberspringe den Export.\")\n",
    "    print(\"Lese bestehende CSV-Datei ein...\")\n",
    "    # Lese die CSV-Datei mit Datums-Parsing\n",
    "    dataframe = pd.read_csv(csv_filepath, parse_dates=['time'], index_col='time')\n",
    "\n",
    "# Modify pandas display options\n",
    "pd.options.display.float_format = '{:,.2f}'.format\n",
    "    \n",
    "# Ändere die Pandas-Anzeigeoptionen\n",
    "pd.options.display.float_format = '{:,.2f}'.format\n",
    "    \n",
    "# Zeige das DataFrame an\n",
    "dataframe.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "71a70abf",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Suchen Sie die Indexbeschriftungen für die Maximal- und Minimalwerte\n",
    "max_index_label = dataframe['water_surface_height_above_reference_datum'].idxmax()\n",
    "min_index_label = dataframe['water_surface_height_above_reference_datum'].idxmin()\n",
    "\n",
    "# Rufen Sie die Zeilen ab, die den Maximal- und Minimalwerten entsprechen\n",
    "max_row = dataframe.loc[max_index_label]\n",
    "min_row = dataframe.loc[min_index_label]\n",
    "\n",
    "# Formatieren Sie die Indexbeschriftungen so, dass nur der Datumsteil angezeigt wird\n",
    "max_date_str = max_index_label.strftime('%Y-%m-%d')\n",
    "min_date_str = min_index_label.strftime('%Y-%m-%d')\n",
    "\n",
    "# Drucken Sie die Ergebnisse\n",
    "print(f\"1. Maximum Water Surface Height: ({max_date_str})\")\n",
    "print(max_row.to_frame().T.to_string(index=False))\n",
    "print()\n",
    "\n",
    "print(f\"2. Minimum Water Surface Height: ({min_date_str})\")\n",
    "print(min_row.to_frame().T.to_string(index=False))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0d05ea02",
   "metadata": {},
   "source": [
    "## 5. Analyse und Visualisierungsmöglichkeiten"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b3f1f5e9",
   "metadata": {},
   "source": [
    "### 5.1 Visualisierung aller Daten (ohne Karte)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9ee6f4d5",
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "from matplotlib.dates import DateFormatter, YearLocator, MonthLocator\n",
    "import matplotlib.ticker as ticker\n",
    "\n",
    "# Erstelle die Figur und Achsen\n",
    "fig, ax = plt.subplots(figsize=(12, 6), facecolor='#f1f1f1', edgecolor='k')\n",
    "\n",
    "# Plotten der Wasserstandsdaten\n",
    "ax.plot(\n",
    "    dataframe.index,\n",
    "    dataframe['water_surface_height_above_reference_datum'],\n",
    "    marker='o',\n",
    "    linestyle='-',\n",
    "    color='#1877F2',\n",
    "    label=\"Wasserstand\",\n",
    ")\n",
    "\n",
    "# Formatieren der x-Achse für bessere Lesbarkeit\n",
    "ax.xaxis.set_major_locator(YearLocator())  # Haupt-Ticks für jedes Jahr\n",
    "ax.xaxis.set_minor_locator(MonthLocator())  # Kleine Ticks für jeden Monat\n",
    "ax.xaxis.set_major_formatter(DateFormatter('%Y')) \n",
    "ax.tick_params(axis='x', which='major', length=4, direction='inout', width=2)\n",
    "ax.tick_params(axis='x', which='minor', length=3, direction='inout')\n",
    "\n",
    "# Setzen der y-Achsen-Grenzen\n",
    "ax.set_ylim(393.5, 396.5)\n",
    "\n",
    "# Setzen der Achsenbeschriftungen und Titel des Diagramms\n",
    "ax.set_xlabel('Jahr', fontsize=12)\n",
    "ax.set_ylabel('Wasserstand (m)', fontsize=12)\n",
    "ax.set_title('Wasserstand des Bodensees', fontsize=14, fontweight='bold')\n",
    "\n",
    "# Hinzufügen eines Rasters zum Diagramm und Formatierung der y-Achse\n",
    "ax.grid(visible=True, color='#b0b0b0', linestyle='--', linewidth=0.8, alpha=0.6)\n",
    "ax.yaxis.set_major_formatter(ticker.FormatStrFormatter('%0.2f'))\n",
    "\n",
    "# Hinzufügen einer Beschreibung und Quelleninformation\n",
    "plt.figtext(\n",
    "    0.4,\n",
    "    -0.05,\n",
    "    (\n",
    "        'Beschreibung: Wasserstand des Bodensees, abgeleitet aus Satellitendaten des CDS.\\n'\n",
    "        'Quelle: Copernicus Climate Change Service, Climate Data Store, (2020): Seepegelstände von 1992 '\n",
    "        'bis heute, abgeleitet aus Satellitendaten. Copernicus Climate Change Service (C3S) Climate Data '\n",
    "        'Store (CDS). DOI: 10.24381/cds.5714c668 (Zugriff am 16-10-2024)'\n",
    "    ),\n",
    "    ha='left',\n",
    "    va='center',\n",
    "    fontsize=9,\n",
    "    wrap=True,\n",
    "    backgroundcolor='w',\n",
    ")\n",
    "\n",
    "# Layout anpassen und das Diagramm anzeigen\n",
    "plt.tight_layout()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "494079cb",
   "metadata": {},
   "source": [
    "### 5.2 Visualisierung der monatlichen Mittelwerte (ohne Karte)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9913d5a8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Gruppiere die Daten nach Monat und berechne den Mittelwert, die Standardabweichung und die Stichprobengröße\n",
    "monthly_data = dataframe.assign(month=dataframe.index.month).groupby('month')['water_surface_height_above_reference_datum']\n",
    "# Berechne nun Mittelwert, Standardabweichung und Anzahl\n",
    "monthly_mean = monthly_data.mean()\n",
    "monthly_std = monthly_data.std()\n",
    "monthly_n = monthly_data.count()\n",
    "\n",
    "# Definiere die Monatsbezeichner und den entsprechenden Zahlenbereich\n",
    "month_labels = ['Jan', 'Feb', 'Mär', 'Apr', 'Mai', 'Jun', 'Jul', 'Aug', 'Sep', 'Okt', 'Nov', 'Dez']\n",
    "months = range(1, 13)\n",
    "\n",
    "# Erstelle das Balkendiagramm\n",
    "fig, ax = plt.subplots(figsize=(12, 6), facecolor='#f1f1f1', edgecolor='k')\n",
    "\n",
    "# Plotte Balken mit der Standardabweichung als Fehlerbalken\n",
    "bars = ax.bar(\n",
    "    months, \n",
    "    monthly_mean, \n",
    "    yerr=monthly_std, \n",
    "    capsize=5, \n",
    "    color='skyblue', \n",
    "    alpha=0.7, \n",
    "    error_kw=dict(ecolor='black', lw=1.5)\n",
    ")\n",
    "\n",
    "# Setze Achsenbezeichner und Diagrammtitel\n",
    "y_min = max(0, monthly_mean.min() - monthly_std.max() - 0.5)\n",
    "y_max = monthly_mean.max() + monthly_std.max() + 0.5\n",
    "ax.set_ylim(y_min, y_max)\n",
    "\n",
    "# Setze Achsenbezeichner und Diagrammtitel\n",
    "ax.set_xlabel('Monat', fontsize=12)\n",
    "ax.set_ylabel('Durchschnittlicher Wasserstand (m)', fontsize=12)\n",
    "ax.set_title('Monatsmittelwerte des Wasserstands des Bodensees mit Standardabweichung', fontsize=14, fontweight='bold')\n",
    "\n",
    "# Setze die X-Achsenbezeichner (1 = Januar, 12 = Dezember)\n",
    "ax.set_xticks(months)\n",
    "ax.set_xticklabels(month_labels)\n",
    "\n",
    "# Füge Stichprobengröße (n) Annotationen über jedem Balken hinzu\n",
    "for bar, n in zip(bars, monthly_n):\n",
    "    height = bar.get_height()\n",
    "    ax.text(\n",
    "        bar.get_x() + bar.get_width() / 2,\n",
    "        height + 0.1,\n",
    "        f'n={n}',\n",
    "        ha='center',\n",
    "        va='bottom',\n",
    "        fontsize=9,\n",
    "        color='black'\n",
    "    )\n",
    "    \n",
    "# Füge ein Gitter zum Diagramm hinzu\n",
    "ax.grid(visible=True, color='#b0b0b0', linestyle='--', linewidth=0.8, alpha=0.6)\n",
    "ax.yaxis.set_major_formatter(ticker.FormatStrFormatter('%0.2f'))\n",
    "\n",
    "# Füge eine Beschreibung und Quellenangabe hinzu\n",
    "plt.figtext(\n",
    "    0.4,\n",
    "    -0.05,\n",
    "    (\n",
    "        'Beschreibung: Wasserstand des Bodensees, ermittelt aus Satellitendaten des CDS.\\n'\n",
    "        'Quelle: Copernicus Climate Change Service, Climate Data Store, (2020): Wasserstände des Bodensees von 1992 '\n",
    "        'bis heute, abgeleitet aus Satellitenbeobachtungen. Copernicus Climate Change Service (C3S) Climate Data '\n",
    "        'Store (CDS). DOI: 10.24381/cds.5714c668 (Zugriff am 16-10-2024)'\n",
    "    ),\n",
    "    ha='left',\n",
    "    va='center',\n",
    "    fontsize=9,\n",
    "    wrap=True,\n",
    "    backgroundcolor='w',\n",
    ")\n",
    "\n",
    "# Passe das Layout an und zeige das Diagramm an\n",
    "plt.tight_layout()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c57a491b",
   "metadata": {},
   "source": [
    "### 5.3 Visualisierung aller Daten (mit Karte)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "03574e8a",
   "metadata": {},
   "outputs": [],
   "source": [
    "import geopandas as gpd\n",
    "from shapely.geometry import Point\n",
    "import contextily as ctx \n",
    "\n",
    "# Definiere den Punkt für den Bodensee (ungefähre Koordinaten)\n",
    "bodensee_point = Point(nc_dataset['lon'][:][0], nc_dataset['lat'][:][0])\n",
    "\n",
    "# Erstelle ein GeoDataFrame mit dem Bodensee-Punkt\n",
    "lake_bodensee = gpd.GeoDataFrame(\n",
    "    {'geometry': [bodensee_point]},\n",
    "    crs='EPSG:4326' # WGS84-Koordinatensystem\n",
    ")\n",
    "\n",
    "# Projektiere in das Web Mercator Koordinatensystem\n",
    "lake_bodensee = lake_bodensee.to_crs(epsg=3857)\n",
    "\n",
    "# Erstelle die Figur und Achsen\n",
    "fig, axs = plt.subplots(1,2, figsize=(14, 6), facecolor='#f1f1f1', edgecolor='k', gridspec_kw={'width_ratios': [1, 1.5]})\n",
    "\n",
    "# --- 1. Karte des Bodensees ---\n",
    "ax = axs[0]\n",
    "lake_bodensee.plot(ax=ax, color='cyan', markersize=50)\n",
    "ctx.add_basemap(ax, source=ctx.providers.Esri.WorldImagery)\n",
    "\n",
    "# Passe den sichtbaren Bereich an (weiter herauszoomen)\n",
    "# Erweitere den Bereich für mehr Umgebung (hier auf 100 km in jede Richtung)\n",
    "ax.set_xlim(lake_bodensee.geometry.x.min() - 80000, lake_bodensee.geometry.x.max() + 80000) # Erweitere den Bereich in x-Richtung\n",
    "ax.set_ylim(lake_bodensee.geometry.y.min() - 80000, lake_bodensee.geometry.y.max() + 80000) # Erweitere den Bereich in y-Richtung\n",
    "\n",
    "ax.set_title(\"Bodensee (Satellitenbild)\")\n",
    "ax.set_axis_off() # Entferne Achsenbeschriftungen\n",
    "\n",
    "# --- 2. Diagramm des Wasserstands ---\n",
    "ax = axs[1]\n",
    "\n",
    "# Plotten der Wasserstandsdaten\n",
    "ax.plot(\n",
    "    dataframe.index,\n",
    "    dataframe['water_surface_height_above_reference_datum'],\n",
    "    marker='o',\n",
    "    linestyle='-',\n",
    "    color='#1877F2',\n",
    "    label=\"Wasserstand\",\n",
    ")\n",
    "\n",
    "# Formatieren der x-Achse für bessere Lesbarkeit\n",
    "ax.xaxis.set_major_locator(YearLocator())  # Hauptmarkierungen für jedes Jahr\n",
    "ax.xaxis.set_minor_locator(MonthLocator())  # Kleinere Markierungen für jeden Monat\n",
    "ax.xaxis.set_major_formatter(DateFormatter('%Y'))\n",
    "ax.tick_params(axis='x', which='major', length=4, direction='inout', width=2)\n",
    "ax.tick_params(axis='x', which='minor', length=3, direction='inout')\n",
    "\n",
    "# Setzen der y-Achsen-Grenzen\n",
    "ax.set_ylim(393.5, 396.5)\n",
    "\n",
    "# Setzen der Achsenbeschriftungen und Titel des Diagramms\n",
    "ax.set_xlabel('Jahr', fontsize=12)\n",
    "ax.set_ylabel('Wasserstand (m)', fontsize=12)\n",
    "ax.set_title('Wasserstand des Bodensees', fontsize=14, fontweight='bold')\n",
    "\n",
    "# Hinzufügen eines Rasters zum Diagramm und Formatierung der y-Achse\n",
    "ax.grid(visible=True, color='#b0b0b0', linestyle='--', linewidth=0.8, alpha=0.6)\n",
    "ax.yaxis.set_major_formatter(ticker.FormatStrFormatter('%0.2f'))\n",
    "\n",
    "# Hinzufügen einer Beschreibung und Quelleninformation\n",
    "plt.figtext(\n",
    "    0.4,\n",
    "    -0.05,\n",
    "    (\n",
    "        'Beschreibung: Wasserstand des Bodensees, bestimmt aus Satellitendaten des CDS.\\n'\n",
    "        'Quelle: Copernicus Climate Change Service, Climate Data Store, (2020): Seepegelstände von 1992 '\n",
    "        'bis heute, abgeleitet aus Satellitenbeobachtungen. Copernicus Climate Change Service (C3S) Climate Data '\n",
    "        'Store (CDS). DOI: 10.24381/cds.5714c668 (Zugriff am 16-10-2024)'\n",
    "    ),\n",
    "    ha='left',\n",
    "    va='center',\n",
    "    fontsize=9,\n",
    "    wrap=True,\n",
    "    backgroundcolor='w',\n",
    ")\n",
    "\n",
    "# Layout anpassen und das Diagramm anzeigen\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d8a0651b",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true
   },
   "source": [
    "### 5.4 Visualisierung der monatlichen Mittelwerte (mit Karte)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e1326ca8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Erstelle die Figur und Achsen\n",
    "fig, axs = plt.subplots(1,2, figsize=(14, 6), facecolor='#f1f1f1', edgecolor='k', gridspec_kw={'width_ratios': [1, 1.5]})\n",
    "\n",
    "# --- 1. Karte des Bodensees ---\n",
    "ax = axs[0]\n",
    "lake_bodensee.plot(ax=ax, color='cyan', markersize=50)\n",
    "ctx.add_basemap(ax, source=ctx.providers.Esri.WorldImagery)\n",
    "\n",
    "# Passe den sichtbaren Bereich an (weiter herauszoomen)\n",
    "# Erweitere den Bereich für mehr Umgebung (hier auf 100 km in jede Richtung)\n",
    "ax.set_xlim(lake_bodensee.geometry.x.min() - 80000, lake_bodensee.geometry.x.max() + 80000) # Erweitere den Bereich in x-Richtung\n",
    "ax.set_ylim(lake_bodensee.geometry.y.min() - 80000, lake_bodensee.geometry.y.max() + 80000) # Erweitere den Bereich in y-Richtung\n",
    "\n",
    "ax.set_title(\"Bodensee (Satellitenbild)\")\n",
    "ax.set_axis_off() # Entferne Achsenbeschriftungen\n",
    "\n",
    "# --- 2. Diagramm des Wasserstands ---\n",
    "ax = axs[1]\n",
    "\n",
    "# Plotte Balken mit der Standardabweichung als Fehlerbalken\n",
    "bars = ax.bar(\n",
    "    months, \n",
    "    monthly_mean, \n",
    "    yerr=monthly_std, \n",
    "    capsize=5, \n",
    "    color='skyblue', \n",
    "    alpha=0.7, \n",
    "    error_kw=dict(ecolor='black', lw=1.5)\n",
    ")\n",
    "\n",
    "# Setze Achsenbezeichner und Diagrammtitel\n",
    "y_min = max(0, monthly_mean.min() - monthly_std.max() - 0.5)\n",
    "y_max = monthly_mean.max() + monthly_std.max() + 0.5\n",
    "ax.set_ylim(y_min, y_max)\n",
    "\n",
    "# Setze Achsenbezeichner und Diagrammtitel\n",
    "ax.set_xlabel('Monat', fontsize=12)\n",
    "ax.set_ylabel('Durchschnittlicher Wasserstand (m)', fontsize=12)\n",
    "ax.set_title('Monatsmittelwerte des Wasserstands des Bodensees mit Standardabweichung', fontsize=14, fontweight='bold')\n",
    "\n",
    "# Setze die X-Achsenbezeichner (1 = Januar, 12 = Dezember)\n",
    "ax.set_xticks(months)\n",
    "ax.set_xticklabels(month_labels)\n",
    "\n",
    "# Füge Stichprobengröße (n) Annotationen über jedem Balken hinzu\n",
    "for bar, n in zip(bars, monthly_n):\n",
    "    height = bar.get_height()\n",
    "    ax.text(\n",
    "        bar.get_x() + bar.get_width() / 2,\n",
    "        height + 0.1,\n",
    "        f'n={n}',\n",
    "        ha='center',\n",
    "        va='bottom',\n",
    "        fontsize=9,\n",
    "        color='black'\n",
    "    )\n",
    "    \n",
    "# Füge ein Gitter zum Diagramm hinzu\n",
    "ax.grid(visible=True, color='#b0b0b0', linestyle='--', linewidth=0.8, alpha=0.6)\n",
    "ax.yaxis.set_major_formatter(ticker.FormatStrFormatter('%0.2f'))\n",
    "\n",
    "# Füge eine Beschreibung und Quellenangabe hinzu\n",
    "plt.figtext(\n",
    "    0.4,\n",
    "    -0.05,\n",
    "    (\n",
    "        'Beschreibung: Wasserstand des Bodensees, ermittelt aus Satellitendaten des CDS.\\n'\n",
    "        'Quelle: Copernicus Climate Change Service, Climate Data Store, (2020): Wasserstände des Bodensees von 1992 '\n",
    "        'bis heute, abgeleitet aus Satellitenbeobachtungen. Copernicus Climate Change Service (C3S) Climate Data '\n",
    "        'Store (CDS). DOI: 10.24381/cds.5714c668 (Zugriff am 16-10-2024)'\n",
    "    ),\n",
    "    ha='left',\n",
    "    va='center',\n",
    "    fontsize=9,\n",
    "    wrap=True,\n",
    "    backgroundcolor='w',\n",
    ")\n",
    "\n",
    "# Passe das Layout an und zeige das Diagramm an\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "myenv",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.16"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {},
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
