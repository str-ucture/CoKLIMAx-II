Traceback (most recent call last):
  File "C:\Users\ShaileshShrestha\anaconda3\envs\myenv\lib\site-packages\jupyter_cache\executors\utils.py", line 58, in single_nb_execution
    executenb(
  File "C:\Users\ShaileshShrestha\anaconda3\envs\myenv\lib\site-packages\nbclient\client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "C:\Users\ShaileshShrestha\anaconda3\envs\myenv\lib\site-packages\jupyter_core\utils\__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
  File "C:\Users\ShaileshShrestha\anaconda3\envs\myenv\lib\asyncio\base_events.py", line 649, in run_until_complete
    return future.result()
  File "C:\Users\ShaileshShrestha\anaconda3\envs\myenv\lib\site-packages\nbclient\client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "C:\Users\ShaileshShrestha\anaconda3\envs\myenv\lib\site-packages\nbclient\client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "C:\Users\ShaileshShrestha\anaconda3\envs\myenv\lib\site-packages\nbclient\client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
#### NDVI AOI

import os
import numpy as np
import rasterio
from rasterio.mask import mask
import geopandas as gpd

# NDVI-Berechnung
def calculate_ndvi(nir_band, red_band):
    nir = nir_band.astype('float32')
    red = red_band.astype('float32')
    ndvi = np.divide(
        (nir - red),
        (nir + red),
        out=np.zeros_like(nir, dtype='float32'),  # Verhindert NaN-Werte
        where=(nir + red) != 0  # Nur dort dividieren, wo nir + red != 0
    )
    return ndvi

# Funktion zur Verarbeitung der ausgewÃ¤hlten Szenen
def process_ndvi(selected_scenes, workfolder, aoi_shapefile):
    # AOI laden
    aoi_gdf = gpd.read_file(aoi_shapefile)
    aoi_geometry = aoi_gdf.geometry.unary_union  # Falls mehrere Polygone vorhanden sind

    for scene in selected_scenes:
        print(f"Verarbeite Szene: {scene}")
        
        # Pfad zur Szene
        scene_path = os.path.join(workfolder, scene)
        granule_path = os.path.join(scene_path, "GRANULE")
        
        # Ermitteln des Granule-Unterverzeichnisses
        granule_subdirs = os.listdir(granule_path)
        if not granule_subdirs:
            print(f"Kein GRANULE-Verzeichnis in {scene}")
            continue
        granule_dir = os.path.join(granule_path, granule_subdirs[0])  # Erster Unterordner
        
        # Pfad zu IMG_DATA/R10m
        img_data_path = os.path.join(granule_dir, "IMG_DATA", "R10m")
        
        # BÃ¤nder suchen
        nir_band = next((f for f in os.listdir(img_data_path) if "_B08_10m.jp2" in f), None)
        red_band = next((f for f in os.listdir(img_data_path) if "_B04_10m.jp2" in f), None)
        
        if not nir_band or not red_band:
            print(f"Fehlende BÃ¤nder in Szene {scene}. Ãœbersprungen.")
            continue
        
        # Volle Pfade zu den BÃ¤ndern
        nir_band_path = os.path.join(img_data_path, nir_band)
        red_band_path = os.path.join(img_data_path, red_band)
        
        # Laden der Rasterdaten und Maskieren innerhalb des 'with' Blocks
        with rasterio.open(nir_band_path) as nir_src, rasterio.open(red_band_path) as red_src:
            # Maskieren des Rasters mit der AOI
            nir_band, nir_transform = mask(nir_src, [aoi_geometry], crop=True)
            red_band, red_transform = mask(red_src, [aoi_geometry], crop=True)

            # NDVI berechnen
            ndvi = calculate_ndvi(nir_band[0], red_band[0])

            # Metadaten fÃ¼r das Ausgabebild anpassen
            crs = nir_src.crs
            transform = nir_transform  # Die transformierte Georeferenzierung nach der Maske

        # Aufnahmedatum aus Szenennamen extrahieren
        date_part = scene.split('_')[2][:8]  # Datum im Format YYYYMMDD

        # GeoTIFF speichern
        output_path = os.path.join(ndvi_directory, f"NDVI_{date_part}_AOI.tif")
        with rasterio.open(
            output_path, 
            'w',
            driver='GTiff',
            height=ndvi.shape[0],
            width=ndvi.shape[1],
            count=1,
            dtype='float32',
            crs=crs,
            transform=transform  # Transformation von der AOI-Maske Ã¼bernehmen
        ) as dst:
            dst.write(ndvi, 1)
        
        print(f"NDVI gespeichert: {output_path}")

# AusfÃ¼hrung mit den ausgewÃ¤hlten Szenen
selected_scenes = selection_widget.value  # Szenen aus dem vorherigen Schritt
process_ndvi(selected_scenes, workfolder, aoi_shapefile)

------------------


[1;31m---------------------------------------------------------------------------[0m
[1;31mNameError[0m                                 Traceback (most recent call last)
Cell [1;32mIn[6], line 91[0m
[0;32m     89[0m [38;5;66;03m# AusfÃ¼hrung mit den ausgewÃ¤hlten Szenen[39;00m
[0;32m     90[0m selected_scenes [38;5;241m=[39m selection_widget[38;5;241m.[39mvalue  [38;5;66;03m# Szenen aus dem vorherigen Schritt[39;00m
[1;32m---> 91[0m process_ndvi(selected_scenes, workfolder, [43maoi_shapefile[49m)

[1;31mNameError[0m: name 'aoi_shapefile' is not defined

