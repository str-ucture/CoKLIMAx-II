{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Landsat Downloader\n",
    "\n",
    "**landsatxplorer** is a Python library designed for searching and downloading Landsat imagery from the USGS EarthExplorer platform. It allows users to query Landsat datasets by various parameters like location, date, and cloud cover, and download the corresponding images. This tool simplifies the process of accessing and working with satellite imagery for analysis and visualization in Python\n",
    "\n",
    "**Information on Library:**\n",
    "* Author:\n",
    "* Notebook Version: 1.3 (Updated: December 03, 2024)\n",
    "\n",
    "Although it is open-source, there are many limitations like:\n",
    "* Downloads satellite images as **.tar** files, with each band stored as a separate GeoTIFF.\n",
    "* Lacks functionality to filter or clip images by bounding box, requiring post-processing.\n",
    "* Outdated (last updated 3 years ago); installing it may disrupt other libraries. Use pip --upgrade libraryName if issues arise."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. Specifying the paths and working directories"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "\n",
    "''' ---- Hier die Verzeichnisse angeben ---- '''\n",
    "download_folder = r\".\\data\\landsatxplorer\\download\"\n",
    "working_folder = r\".\\data\\landsatxplorer\\working\"\n",
    "geotiff_folder = r\".\\data\\landsatxplorer\\geotiff\"\n",
    "csv_folder = r\".\\data\\landsatxplorer\\csv\"\n",
    "output_folder = r\".\\data\\landsatxplorer\\output\"\n",
    "''' ----- Ende der Eingaben ---- '''\n",
    "\n",
    "os.makedirs(download_folder, exist_ok=True)\n",
    "os.makedirs(working_folder, exist_ok=True)\n",
    "os.makedirs(geotiff_folder, exist_ok=True)\n",
    "os.makedirs(csv_folder, exist_ok=True)\n",
    "os.makedirs(output_folder, exist_ok=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. Download and Extract Dataset"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2.1 Authentication\n",
    "\n",
    "To authenticate with the USGS API, follow these steps:\n",
    "\n",
    "1. **Register**: Create an account at the [USGS registration page](https://ers.cr.usgs.gov/register/).\n",
    "2. **Obtain Credentials**: After registering, SAVE your credentials as a `.json` file.\n",
    "\n",
    "#### Important Security Note:\n",
    "- **Keep the credentials file private**: Ensure that the `.json` file containing your username and password is stored securely and cannot be accessed by unauthorized users.\n",
    "- **Permissions**: Do not upload the credentials file to public repositories or share it with others.\n",
    "\n",
    "#### Example Format of the Credentials File:\n",
    "The `.json` file should have the following format:\n",
    "\n",
    "```json\n",
    "{\n",
    "    \"username\": \"your_username\",\n",
    "    \"password\": \"your_password\"\n",
    "}\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "import json\n",
    "from landsatxplore.api import API\n",
    "\n",
    "# Load credentials from a local JSON file\n",
    "with open(\"D:/usgs.json\", \"r\") as file:\n",
    "    credentials = json.load(file)\n",
    "\n",
    "username = credentials[\"username\"]\n",
    "password = credentials[\"password\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2.2 Search for the available scenes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "8 scenes found.\n"
     ]
    }
   ],
   "source": [
    "api = API(username=username, password=password)\n",
    "\n",
    "scenes = api.search(\n",
    "    dataset='landsat_ot_c2_l2',\n",
    "    latitude=47.6780,\n",
    "    longitude=9.1737,\n",
    "    start_date='2020-01-01',\n",
    "    end_date='2020-10-01',\n",
    "    max_cloud_cover=10\n",
    ")\n",
    "print(f\"{len(scenes)} scenes found.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>entity_id</th>\n",
       "      <th>display_id</th>\n",
       "      <th>acq_date</th>\n",
       "      <th>scene_cloud_cover</th>\n",
       "      <th>land_cloud_cover</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>LC81950272020256LGN00</td>\n",
       "      <td>LC08_L2SP_195027_20200912_...</td>\n",
       "      <td>2020-09-12</td>\n",
       "      <td>9.18</td>\n",
       "      <td>9.18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>LC81940272020233LGN00</td>\n",
       "      <td>LC08_L2SP_194027_20200820_...</td>\n",
       "      <td>2020-08-20</td>\n",
       "      <td>5.51</td>\n",
       "      <td>5.51</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>LC81950272020224LGN00</td>\n",
       "      <td>LC08_L2SP_195027_20200811_...</td>\n",
       "      <td>2020-08-11</td>\n",
       "      <td>8.02</td>\n",
       "      <td>8.02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>LC81950272020176LGN00</td>\n",
       "      <td>LC08_L2SP_195027_20200624_...</td>\n",
       "      <td>2020-06-24</td>\n",
       "      <td>3.12</td>\n",
       "      <td>3.12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>LC81940272020153LGN00</td>\n",
       "      <td>LC08_L2SP_194027_20200601_...</td>\n",
       "      <td>2020-06-01</td>\n",
       "      <td>5.08</td>\n",
       "      <td>5.08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>LC81950272020128LGN00</td>\n",
       "      <td>LC08_L2SP_195027_20200507_...</td>\n",
       "      <td>2020-05-07</td>\n",
       "      <td>1.80</td>\n",
       "      <td>1.80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>LC81950272020096LGN00</td>\n",
       "      <td>LC08_L2SP_195027_20200405_...</td>\n",
       "      <td>2020-04-05</td>\n",
       "      <td>2.01</td>\n",
       "      <td>2.01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>LC81950272020016LGN00</td>\n",
       "      <td>LC08_L2SP_195027_20200116_...</td>\n",
       "      <td>2020-01-16</td>\n",
       "      <td>1.56</td>\n",
       "      <td>1.56</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               entity_id                     display_id   acq_date  \\\n",
       "0  LC81950272020256LGN00  LC08_L2SP_195027_20200912_... 2020-09-12   \n",
       "1  LC81940272020233LGN00  LC08_L2SP_194027_20200820_... 2020-08-20   \n",
       "2  LC81950272020224LGN00  LC08_L2SP_195027_20200811_... 2020-08-11   \n",
       "3  LC81950272020176LGN00  LC08_L2SP_195027_20200624_... 2020-06-24   \n",
       "4  LC81940272020153LGN00  LC08_L2SP_194027_20200601_... 2020-06-01   \n",
       "5  LC81950272020128LGN00  LC08_L2SP_195027_20200507_... 2020-05-07   \n",
       "6  LC81950272020096LGN00  LC08_L2SP_195027_20200405_... 2020-04-05   \n",
       "7  LC81950272020016LGN00  LC08_L2SP_195027_20200116_... 2020-01-16   \n",
       "\n",
       "   scene_cloud_cover  land_cloud_cover  \n",
       "0               9.18              9.18  \n",
       "1               5.51              5.51  \n",
       "2               8.02              8.02  \n",
       "3               3.12              3.12  \n",
       "4               5.08              5.08  \n",
       "5               1.80              1.80  \n",
       "6               2.01              2.01  \n",
       "7               1.56              1.56  "
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "rows = []\n",
    "for scene in scenes:\n",
    "    rows.append(\n",
    "        {\n",
    "            \"entity_id\": scene[\"entity_id\"],\n",
    "            \"display_id\": scene[\"display_id\"],\n",
    "            \"acq_date\": scene[\"acquisition_date\"],\n",
    "            \"scene_cloud_cover\": scene[\"scene_cloud_cover\"],\n",
    "            \"land_cloud_cover\": scene[\"land_cloud_cover\"],\n",
    "            # \"image_quality\": scene[\"image_quality\"],\n",
    "            # \"day-night_indicator\": scene[\"day-night_indicator\"]\n",
    "            }\n",
    "        )\n",
    "    \n",
    "# Modify pandas display options\n",
    "pd.options.display.max_colwidth = 30\n",
    "\n",
    "df = pd.DataFrame(rows)\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div style=\"width:100%;\"><div style=\"position:relative;width:100%;height:0;padding-bottom:60%;\"><span style=\"color:#565656\">Make this Notebook Trusted to load map: File -> Trust Notebook</span><iframe srcdoc=\"&lt;!DOCTYPE html&gt;\n",
       "&lt;html&gt;\n",
       "&lt;head&gt;\n",
       "    \n",
       "    &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=UTF-8&quot; /&gt;\n",
       "    \n",
       "        &lt;script&gt;\n",
       "            L_NO_TOUCH = false;\n",
       "            L_DISABLE_3D = false;\n",
       "        &lt;/script&gt;\n",
       "    \n",
       "    &lt;style&gt;html, body {width: 100%;height: 100%;margin: 0;padding: 0;}&lt;/style&gt;\n",
       "    &lt;style&gt;#map {position:absolute;top:0;bottom:0;right:0;left:0;}&lt;/style&gt;\n",
       "    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.js&quot;&gt;&lt;/script&gt;\n",
       "    &lt;script src=&quot;https://code.jquery.com/jquery-3.7.1.min.js&quot;&gt;&lt;/script&gt;\n",
       "    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/js/bootstrap.bundle.min.js&quot;&gt;&lt;/script&gt;\n",
       "    &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.js&quot;&gt;&lt;/script&gt;\n",
       "    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.css&quot;/&gt;\n",
       "    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css&quot;/&gt;\n",
       "    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap-glyphicons.css&quot;/&gt;\n",
       "    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6.2.0/css/all.min.css&quot;/&gt;\n",
       "    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.css&quot;/&gt;\n",
       "    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/gh/python-visualization/folium/folium/templates/leaflet.awesome.rotate.min.css&quot;/&gt;\n",
       "    \n",
       "            &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,\n",
       "                initial-scale=1.0, maximum-scale=1.0, user-scalable=no&quot; /&gt;\n",
       "            &lt;style&gt;\n",
       "                #map_2511aab06456122781eb59816607d57e {\n",
       "                    position: relative;\n",
       "                    width: 100.0%;\n",
       "                    height: 450.0px;\n",
       "                    left: 0.0%;\n",
       "                    top: 0.0%;\n",
       "                }\n",
       "                .leaflet-container { font-size: 1rem; }\n",
       "            &lt;/style&gt;\n",
       "        \n",
       "&lt;/head&gt;\n",
       "&lt;body&gt;\n",
       "    \n",
       "    \n",
       "            &lt;div class=&quot;folium-map&quot; id=&quot;map_2511aab06456122781eb59816607d57e&quot; &gt;&lt;/div&gt;\n",
       "        \n",
       "&lt;/body&gt;\n",
       "&lt;script&gt;\n",
       "    \n",
       "    \n",
       "            var map_2511aab06456122781eb59816607d57e = L.map(\n",
       "                &quot;map_2511aab06456122781eb59816607d57e&quot;,\n",
       "                {\n",
       "                    center: [47.5, 8.0],\n",
       "                    crs: L.CRS.EPSG3857,\n",
       "                    ...{\n",
       "  &quot;zoom&quot;: 7,\n",
       "  &quot;zoomControl&quot;: true,\n",
       "  &quot;preferCanvas&quot;: false,\n",
       "  &quot;scrollWheelZoom&quot;: false,\n",
       "}\n",
       "\n",
       "                }\n",
       "            );\n",
       "\n",
       "            \n",
       "\n",
       "        \n",
       "    \n",
       "            var tile_layer_e2ee2a735355cff26246b620a71ceaf4 = L.tileLayer(\n",
       "                &quot;https://tile.openstreetmap.org/{z}/{x}/{y}.png&quot;,\n",
       "                {\n",
       "  &quot;minZoom&quot;: 0,\n",
       "  &quot;maxZoom&quot;: 19,\n",
       "  &quot;maxNativeZoom&quot;: 19,\n",
       "  &quot;noWrap&quot;: false,\n",
       "  &quot;attribution&quot;: &quot;\\u0026copy; \\u003ca href=\\&quot;https://www.openstreetmap.org/copyright\\&quot;\\u003eOpenStreetMap\\u003c/a\\u003e contributors&quot;,\n",
       "  &quot;subdomains&quot;: &quot;abc&quot;,\n",
       "  &quot;detectRetina&quot;: false,\n",
       "  &quot;tms&quot;: false,\n",
       "  &quot;opacity&quot;: 1,\n",
       "}\n",
       "\n",
       "            );\n",
       "        \n",
       "    \n",
       "            tile_layer_e2ee2a735355cff26246b620a71ceaf4.addTo(map_2511aab06456122781eb59816607d57e);\n",
       "        \n",
       "    \n",
       "            var feature_group_49a188dbd20ef746c98d9bb5abcc5d90 = L.featureGroup(\n",
       "                {\n",
       "}\n",
       "            );\n",
       "        \n",
       "    \n",
       "            var polygon_0d250b2d735bc6c9c3627065bfd99107 = L.polygon(\n",
       "                [[46.80577, 6.4291], [46.36914, 8.84615], [48.07038, 9.54652], [48.51237, 7.05177], [46.80577, 6.4291]],\n",
       "                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;rgb(48, 18, 59)&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;rgb(48, 18, 59)&quot;, &quot;fillOpacity&quot;: 0.2, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;noClip&quot;: false, &quot;opacity&quot;: 1.0, &quot;smoothFactor&quot;: 1.0, &quot;stroke&quot;: true, &quot;weight&quot;: 3}\n",
       "            ).addTo(feature_group_49a188dbd20ef746c98d9bb5abcc5d90);\n",
       "        \n",
       "    \n",
       "            feature_group_49a188dbd20ef746c98d9bb5abcc5d90.addTo(map_2511aab06456122781eb59816607d57e);\n",
       "        \n",
       "    \n",
       "            var feature_group_d27dcdf52330dec854151b88bfd7ca98 = L.featureGroup(\n",
       "                {\n",
       "}\n",
       "            );\n",
       "        \n",
       "    \n",
       "            var polygon_63e8950eaa68b428c7a1e6ab92e00afe = L.polygon(\n",
       "                [[46.8056, 7.99131], [46.36892, 10.40793], [48.07023, 11.10851], [48.51226, 8.61421], [46.8056, 7.99131]],\n",
       "                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;rgb(61, 55, 145)&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;rgb(61, 55, 145)&quot;, &quot;fillOpacity&quot;: 0.2, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;noClip&quot;: false, &quot;opacity&quot;: 1.0, &quot;smoothFactor&quot;: 1.0, &quot;stroke&quot;: true, &quot;weight&quot;: 3}\n",
       "            ).addTo(feature_group_d27dcdf52330dec854151b88bfd7ca98);\n",
       "        \n",
       "    \n",
       "            feature_group_d27dcdf52330dec854151b88bfd7ca98.addTo(map_2511aab06456122781eb59816607d57e);\n",
       "        \n",
       "    \n",
       "            var feature_group_7a96608a07f65fa936a20c64767cf55d = L.featureGroup(\n",
       "                {\n",
       "}\n",
       "            );\n",
       "        \n",
       "    \n",
       "            var polygon_adca582908c1969cff29e37674c732d4 = L.polygon(\n",
       "                [[46.80565, 6.45436], [46.36907, 8.8704], [48.07049, 9.571], [48.51243, 7.07728], [46.80565, 6.45436]],\n",
       "                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;rgb(69, 91, 206)&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;rgb(69, 91, 206)&quot;, &quot;fillOpacity&quot;: 0.2, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;noClip&quot;: false, &quot;opacity&quot;: 1.0, &quot;smoothFactor&quot;: 1.0, &quot;stroke&quot;: true, &quot;weight&quot;: 3}\n",
       "            ).addTo(feature_group_7a96608a07f65fa936a20c64767cf55d);\n",
       "        \n",
       "    \n",
       "            feature_group_7a96608a07f65fa936a20c64767cf55d.addTo(map_2511aab06456122781eb59816607d57e);\n",
       "        \n",
       "    \n",
       "            var feature_group_323102f9db6104edac4f1720a58fb69c = L.featureGroup(\n",
       "                {\n",
       "}\n",
       "            );\n",
       "        \n",
       "    \n",
       "            var polygon_d6e75a528a6a91cdc4e04c359c8763b7 = L.polygon(\n",
       "                [[46.80596, 6.4331], [46.3692, 8.84952], [48.07053, 9.5503], [48.51266, 7.05617], [46.80596, 6.4331]],\n",
       "                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;rgb(70, 127, 246)&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;rgb(70, 127, 246)&quot;, &quot;fillOpacity&quot;: 0.2, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;noClip&quot;: false, &quot;opacity&quot;: 1.0, &quot;smoothFactor&quot;: 1.0, &quot;stroke&quot;: true, &quot;weight&quot;: 3}\n",
       "            ).addTo(feature_group_323102f9db6104edac4f1720a58fb69c);\n",
       "        \n",
       "    \n",
       "            feature_group_323102f9db6104edac4f1720a58fb69c.addTo(map_2511aab06456122781eb59816607d57e);\n",
       "        \n",
       "    \n",
       "            var feature_group_68b0c45f086739e81d5b64e0f5452318 = L.featureGroup(\n",
       "                {\n",
       "}\n",
       "            );\n",
       "        \n",
       "    \n",
       "            var polygon_51fc1777b1388a59bf15b69d6caeb644 = L.polygon(\n",
       "                [[46.80604, 7.99023], [46.3691, 10.40725], [48.07029, 11.10803], [48.5126, 8.6133], [46.80604, 7.99023]],\n",
       "                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;rgb(59, 160, 252)&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;rgb(59, 160, 252)&quot;, &quot;fillOpacity&quot;: 0.2, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;noClip&quot;: false, &quot;opacity&quot;: 1.0, &quot;smoothFactor&quot;: 1.0, &quot;stroke&quot;: true, &quot;weight&quot;: 3}\n",
       "            ).addTo(feature_group_68b0c45f086739e81d5b64e0f5452318);\n",
       "        \n",
       "    \n",
       "            feature_group_68b0c45f086739e81d5b64e0f5452318.addTo(map_2511aab06456122781eb59816607d57e);\n",
       "        \n",
       "    \n",
       "            var feature_group_2aa347f664fb34d8f2f25cec89e8093a = L.featureGroup(\n",
       "                {\n",
       "}\n",
       "            );\n",
       "        \n",
       "    \n",
       "            var polygon_7a74ebd83c6e21fa13fcc2df1ad8be35 = L.polygon(\n",
       "                [[46.80476, 6.3759], [46.3697, 8.79304], [48.07143, 9.49114], [48.5118, 6.99625], [46.80476, 6.3759]],\n",
       "                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;rgb(35, 194, 228)&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;rgb(35, 194, 228)&quot;, &quot;fillOpacity&quot;: 0.2, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;noClip&quot;: false, &quot;opacity&quot;: 1.0, &quot;smoothFactor&quot;: 1.0, &quot;stroke&quot;: true, &quot;weight&quot;: 3}\n",
       "            ).addTo(feature_group_2aa347f664fb34d8f2f25cec89e8093a);\n",
       "        \n",
       "    \n",
       "            feature_group_2aa347f664fb34d8f2f25cec89e8093a.addTo(map_2511aab06456122781eb59816607d57e);\n",
       "        \n",
       "    \n",
       "            var feature_group_56ee16a168c269b0c8d160d1b386ff96 = L.featureGroup(\n",
       "                {\n",
       "}\n",
       "            );\n",
       "        \n",
       "    \n",
       "            var polygon_5f3163547fec3f215b0dc1ddcc492291 = L.polygon(\n",
       "                [[46.80459, 6.40358], [46.36947, 8.82002], [48.07129, 9.51843], [48.51172, 7.02425], [46.80459, 6.40358]],\n",
       "                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;rgb(23, 220, 194)&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;rgb(23, 220, 194)&quot;, &quot;fillOpacity&quot;: 0.2, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;noClip&quot;: false, &quot;opacity&quot;: 1.0, &quot;smoothFactor&quot;: 1.0, &quot;stroke&quot;: true, &quot;weight&quot;: 3}\n",
       "            ).addTo(feature_group_56ee16a168c269b0c8d160d1b386ff96);\n",
       "        \n",
       "    \n",
       "            feature_group_56ee16a168c269b0c8d160d1b386ff96.addTo(map_2511aab06456122781eb59816607d57e);\n",
       "        \n",
       "    \n",
       "            var feature_group_58216bb8b08d37f8ba8fe00a61f48696 = L.featureGroup(\n",
       "                {\n",
       "}\n",
       "            );\n",
       "        \n",
       "    \n",
       "            var polygon_bab1e5a238c1be8c8d0bd873b3c2ff82 = L.polygon(\n",
       "                [[46.80518, 6.43038], [46.36934, 8.84755], [48.07084, 9.54674], [48.512, 7.05183], [46.80518, 6.43038]],\n",
       "                {&quot;bubblingMouseEvents&quot;: true, &quot;color&quot;: &quot;rgb(44, 239, 157)&quot;, &quot;dashArray&quot;: null, &quot;dashOffset&quot;: null, &quot;fill&quot;: true, &quot;fillColor&quot;: &quot;rgb(44, 239, 157)&quot;, &quot;fillOpacity&quot;: 0.2, &quot;fillRule&quot;: &quot;evenodd&quot;, &quot;lineCap&quot;: &quot;round&quot;, &quot;lineJoin&quot;: &quot;round&quot;, &quot;noClip&quot;: false, &quot;opacity&quot;: 1.0, &quot;smoothFactor&quot;: 1.0, &quot;stroke&quot;: true, &quot;weight&quot;: 3}\n",
       "            ).addTo(feature_group_58216bb8b08d37f8ba8fe00a61f48696);\n",
       "        \n",
       "    \n",
       "            feature_group_58216bb8b08d37f8ba8fe00a61f48696.addTo(map_2511aab06456122781eb59816607d57e);\n",
       "        \n",
       "    \n",
       "            var layer_control_c4b2384745477defe6af9d702d1243ba_layers = {\n",
       "                base_layers : {\n",
       "                    &quot;openstreetmap&quot; : tile_layer_e2ee2a735355cff26246b620a71ceaf4,\n",
       "                },\n",
       "                overlays :  {\n",
       "                    &quot;strLC81950272020256LGN00 (CC: 9)&quot; : feature_group_49a188dbd20ef746c98d9bb5abcc5d90,\n",
       "                    &quot;strLC81940272020233LGN00 (CC: 6)&quot; : feature_group_d27dcdf52330dec854151b88bfd7ca98,\n",
       "                    &quot;strLC81950272020224LGN00 (CC: 8)&quot; : feature_group_7a96608a07f65fa936a20c64767cf55d,\n",
       "                    &quot;strLC81950272020176LGN00 (CC: 3)&quot; : feature_group_323102f9db6104edac4f1720a58fb69c,\n",
       "                    &quot;strLC81940272020153LGN00 (CC: 5)&quot; : feature_group_68b0c45f086739e81d5b64e0f5452318,\n",
       "                    &quot;strLC81950272020128LGN00 (CC: 2)&quot; : feature_group_2aa347f664fb34d8f2f25cec89e8093a,\n",
       "                    &quot;strLC81950272020096LGN00 (CC: 2)&quot; : feature_group_56ee16a168c269b0c8d160d1b386ff96,\n",
       "                    &quot;strLC81950272020016LGN00 (CC: 2)&quot; : feature_group_58216bb8b08d37f8ba8fe00a61f48696,\n",
       "                },\n",
       "            };\n",
       "            let layer_control_c4b2384745477defe6af9d702d1243ba = L.control.layers(\n",
       "                layer_control_c4b2384745477defe6af9d702d1243ba_layers.base_layers,\n",
       "                layer_control_c4b2384745477defe6af9d702d1243ba_layers.overlays,\n",
       "                {\n",
       "  &quot;position&quot;: &quot;topright&quot;,\n",
       "  &quot;collapsed&quot;: true,\n",
       "  &quot;autoZIndex&quot;: true,\n",
       "}\n",
       "            ).addTo(map_2511aab06456122781eb59816607d57e);\n",
       "\n",
       "        \n",
       "&lt;/script&gt;\n",
       "&lt;/html&gt;\" style=\"position:absolute;width:100%;height:100%;left:0;top:0;border:none !important;\" allowfullscreen webkitallowfullscreen mozallowfullscreen></iframe></div></div>"
      ],
      "text/plain": [
       "<folium.folium.Map at 0x245f0c73d60>"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import folium\n",
    "from shapely import wkt\n",
    "from matplotlib import pyplot as plt\n",
    "\n",
    "cmap = plt.get_cmap(\"turbo\", 20)\n",
    "m = folium.Map(location=[47.5, 8.0],\n",
    "               zoom_start=7,\n",
    "               height=450,\n",
    "               scrollWheelZoom=False)\n",
    "\n",
    "for i, scene in enumerate(scenes):\n",
    "    entity_id = scene['entity_id']\n",
    "    entity_cc = scene['cloud_cover']\n",
    "    polygon_wkt = scene[\"spatial_coverage\"]\n",
    "    if isinstance(polygon_wkt, str):\n",
    "        polygon = wkt.loads(polygon_wkt)\n",
    "    else:\n",
    "        polygon = polygon_wkt\n",
    "\n",
    "    color = [int(c * 255) for c in cmap(i)[:3]]\n",
    "    polygon_fg = folium.FeatureGroup(name=f\"str{entity_id} (CC: {entity_cc})\")\n",
    "    folium.Polygon(\n",
    "        locations=[(lat, lon) for lon, lat in polygon.exterior.coords],\n",
    "        color=f\"rgb({color[0]}, {color[1]}, {color[2]})\",\n",
    "        fill=True,\n",
    "        fill_opacity=0.2,\n",
    "    ).add_to(polygon_fg)\n",
    "\n",
    "    polygon_fg.add_to(m)\n",
    "\n",
    "folium.LayerControl().add_to(m)\n",
    "m"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2.3 Download the scenes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The dataset, LC08_L2SP_204025_20200927_20201006_02_T1, is already downloaded. Skipping Download.\n"
     ]
    }
   ],
   "source": [
    "from landsatxplore.earthexplorer import EarthExplorer\n",
    "\n",
    "ee = EarthExplorer(username, password)\n",
    "\n",
    "identifier = 'LC08_L2SP_204025_20200927_20201006_02_T1'\n",
    "download_filename = f\"{identifier}.tar\"\n",
    "download_filepath = os.path.join(download_folder, download_filename)\n",
    "\n",
    "if not os.path.isfile(download_filepath):\n",
    "    ee.download(identifier=identifier,\n",
    "                output_dir=download_folder,\n",
    "                )\n",
    "else:\n",
    "    print(f\"The dataset, {identifier}, is already downloaded. Skipping Download.\")\n",
    "\n",
    "api.logout()\n",
    "ee.logout()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2.4 Extract the tar file"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "'.\\data\\landsatxplorer\\working\\LC08_L2SP_204025_20200927_20201006_02_T1' is not empty. Skipping extraction.\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "import tarfile\n",
    "\n",
    "# Define paths\n",
    "extract_folder = os.path.join(working_folder, identifier)\n",
    "os.makedirs(extract_folder, exist_ok=True)\n",
    "\n",
    "if not os.listdir(extract_folder):\n",
    "    with tarfile.open(download_filepath) as tar:\n",
    "        tar.extractall(path=extract_folder)\n",
    "else:\n",
    "    print(f\"'{extract_folder}' is not empty. Skipping extraction.\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3. Merge RGB bands a single GeoTIFF file"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['LC08_L2SP_204025_20200927_20201006_02_T1_ANG.txt',\n",
       " 'LC08_L2SP_204025_20200927_20201006_02_T1_MTL.json',\n",
       " 'LC08_L2SP_204025_20200927_20201006_02_T1_MTL.txt',\n",
       " 'LC08_L2SP_204025_20200927_20201006_02_T1_MTL.xml',\n",
       " 'LC08_L2SP_204025_20200927_20201006_02_T1_QA_PIXEL.TIF',\n",
       " 'LC08_L2SP_204025_20200927_20201006_02_T1_QA_RADSAT.TIF',\n",
       " 'LC08_L2SP_204025_20200927_20201006_02_T1_SR_B1.TIF',\n",
       " 'LC08_L2SP_204025_20200927_20201006_02_T1_SR_B2.TIF',\n",
       " 'LC08_L2SP_204025_20200927_20201006_02_T1_SR_B3.TIF',\n",
       " 'LC08_L2SP_204025_20200927_20201006_02_T1_SR_B4.TIF',\n",
       " 'LC08_L2SP_204025_20200927_20201006_02_T1_SR_B5.TIF',\n",
       " 'LC08_L2SP_204025_20200927_20201006_02_T1_SR_B6.TIF',\n",
       " 'LC08_L2SP_204025_20200927_20201006_02_T1_SR_B7.TIF',\n",
       " 'LC08_L2SP_204025_20200927_20201006_02_T1_SR_QA_AEROSOL.TIF',\n",
       " 'LC08_L2SP_204025_20200927_20201006_02_T1_SR_stac.json',\n",
       " 'LC08_L2SP_204025_20200927_20201006_02_T1_ST_ATRAN.TIF',\n",
       " 'LC08_L2SP_204025_20200927_20201006_02_T1_ST_B10.TIF',\n",
       " 'LC08_L2SP_204025_20200927_20201006_02_T1_ST_CDIST.TIF',\n",
       " 'LC08_L2SP_204025_20200927_20201006_02_T1_ST_DRAD.TIF',\n",
       " 'LC08_L2SP_204025_20200927_20201006_02_T1_ST_EMIS.TIF',\n",
       " 'LC08_L2SP_204025_20200927_20201006_02_T1_ST_EMSD.TIF',\n",
       " 'LC08_L2SP_204025_20200927_20201006_02_T1_ST_QA.TIF',\n",
       " 'LC08_L2SP_204025_20200927_20201006_02_T1_ST_stac.json',\n",
       " 'LC08_L2SP_204025_20200927_20201006_02_T1_ST_TRAD.TIF',\n",
       " 'LC08_L2SP_204025_20200927_20201006_02_T1_ST_URAD.TIF',\n",
       " 'LC08_L2SP_204025_20200927_20201006_02_T1_thumb_large.jpeg',\n",
       " 'LC08_L2SP_204025_20200927_20201006_02_T1_thumb_small.jpeg']"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "file_list = os.listdir(extract_folder)\n",
    "file_list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "# import rasterio\n",
    "# import os\n",
    "# from rasterio.merge import merge\n",
    "\n",
    "# files = [\n",
    "#     './data/landsatxplorer/working/LC08_L2SP_195027_20200507_20200820_02_T1_SR_B2.TIF',\n",
    "#     './data/landsatxplorer/working/LC08_L2SP_195027_20200507_20200820_02_T1_SR_B3.TIF',\n",
    "#     './data/landsatxplorer/working/LC08_L2SP_195027_20200507_20200820_02_T1_SR_B4.TIF'\n",
    "# ]\n",
    "\n",
    "# datasets = [rasterio.open(f) for f in files]\n",
    "\n",
    "# merged_data, merged_transform = merge(datasets)\n",
    "\n",
    "# metadata = datasets[0].meta\n",
    "# metadata.update({\n",
    "#     'count': len(datasets),  # Number of bands in the merged file\n",
    "#     'transform': merged_transform\n",
    "# })\n",
    "\n",
    "# output_file = r'G:/merged.tif'\n",
    "\n",
    "# with rasterio.open(output_file, 'w', **metadata) as dst:\n",
    "#     # Loop through each band in the merged data\n",
    "#     for i in range(len(datasets)):\n",
    "#         dst.write(merged_data[i], i+1)  # i+1 because band indexes in GeoTIFF start from 1\n",
    "\n",
    "# print(f\"Merged GeoTIFF file saved as {output_file}\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "myenv",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
