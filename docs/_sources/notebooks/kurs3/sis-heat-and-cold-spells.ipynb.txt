{
 "cells": [
  {
   "attachments": {},
   "cell_type": "markdown",
   "id": "a2d85cd6-61a3-49dd-8441-0b517de9c301",
   "metadata": {},
   "source": [
    "# Hitzewellen-Tage anhand von Klimaprojektionen\n",
    "\n",
    "Dieses Skript verarbeitet den Datensatz \"Heat Wave Days\" aus dem Copernics Climate Data Store. Der Datensatz enthält die Anzahl der Hitzewellen-Tage (Heat wave days; HWD), die mit verschiedenen europaweiten sowie nationalen/regionalen Definitionen im Rahmen des C3S European Health Service entwickelt wurden. Diese Tage sind für unterschiedliche zukünftige Zeiträume und Klimawandelszenarien verfügbar.\n",
    "\n",
    "**Informationen zum Datensatz**:\n",
    "\n",
    "* Source: [Heat waves and cold spells in Europe](https://cds.climate.copernicus.eu/datasets/sis-heat-and-cold-spells?tab=overview)\n",
    "* Author: T. Tewes (Stadt Konstanz) \n",
    "* Notebook-Version: 1.4 (03.12.2024)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "35515946",
   "metadata": {},
   "source": [
    "## 1. Specifying the paths and working directories"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "01f1b1d9-132a-4dca-9702-7c64a15eb69d",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "\n",
    "''' ---- Hier die Verzeichnisse angeben ---- '''\n",
    "download_folder = r\".\\data\\sis-heat-and-cold-spells\\download\"\n",
    "working_folder = r\".\\data\\sis-heat-and-cold-spells\\working\"\n",
    "geotiff_folder = r\".\\data\\sis-heat-and-cold-spells\\geotiff\"\n",
    "csv_folder = r\".\\data\\sis-heat-and-cold-spells\\csv\"\n",
    "output_folder = r\".\\data\\sis-heat-and-cold-spells\\output\"\n",
    "''' ----- Ende der Eingaben ---- '''\n",
    "\n",
    "if not os.path.exists(download_folder):\n",
    "    os.makedirs(download_folder)\n",
    "if not os.path.exists(working_folder):\n",
    "    os.makedirs(working_folder)\n",
    "if not os.path.exists(geotiff_folder):\n",
    "    os.makedirs(geotiff_folder)\n",
    "if not os.path.exists(csv_folder):\n",
    "    os.makedirs(csv_folder)\n",
    "if not os.path.exists(output_folder):\n",
    "    os.makedirs(output_folder)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "54b26944",
   "metadata": {},
   "source": [
    "## 2. Download- und Upload-Daten"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "93e92864",
   "metadata": {},
   "source": [
    "### 2.1 Authentication"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "d6378160",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-12-09 11:39:26,108 INFO [2024-09-28T00:00:00] **Welcome to the New Climate Data Store (CDS)!** This new system is in its early days of full operations and still undergoing enhancements and fine tuning. Some disruptions are to be expected. Your \n",
      "[feedback](https://jira.ecmwf.int/plugins/servlet/desk/portal/1/create/202) is key to improve the user experience on the new CDS for the benefit of everyone. Thank you.\n",
      "2024-12-09 11:39:26,110 INFO [2024-09-26T00:00:00] Watch our [Forum](https://forum.ecmwf.int/) for Announcements, news and other discussed topics.\n",
      "2024-12-09 11:39:26,111 INFO [2024-09-16T00:00:00] Remember that you need to have an ECMWF account to use the new CDS. **Your old CDS credentials will not work in new CDS!**\n",
      "2024-12-09 11:39:26,112 WARNING [2024-06-16T00:00:00] CDS API syntax is changed and some keys or parameter names may have also changed. To avoid requests failing, please use the \"Show API request code\" tool on the dataset Download Form to check you are using the correct syntax for your API request.\n"
     ]
    }
   ],
   "source": [
    "import cdsapi\n",
    "\n",
    "def main():\n",
    "    api_key = \"fdae60fd-35d4-436f-825c-c63fedab94a4\"\n",
    "    api_url = \"https://cds.climate.copernicus.eu/api\"\n",
    "    client = cdsapi.Client(url=api_url, key=api_key)\n",
    "    return client\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e9974b0d",
   "metadata": {},
   "source": [
    "### 2.2 Variable: Heat wave days\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "c0861531-c2ee-48e5-91a0-a81cf5fd09eb",
   "metadata": {},
   "outputs": [],
   "source": [
    "dataset = \"sis-heat-and-cold-spells\"\n",
    "request = {\n",
    "    \"variable\": [\"heat_wave_days\"],\n",
    "    \"definition\": \"climatological_related\",\n",
    "    \"experiment\": [\n",
    "        \"rcp4_5\",\n",
    "        \"rcp8_5\"\n",
    "    ],\n",
    "    \"ensemble_statistic\": [\n",
    "        \"ensemble_members_average\",\n",
    "        \"ensemble_members_standard_deviation\"\n",
    "    ]\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "25840ec3",
   "metadata": {},
   "outputs": [],
   "source": [
    "# # Uncomment und führen Sie diese Zelle aus, um den Datensatz herunterzuladen:\n",
    "\n",
    "# def main_retrieve():\n",
    "#     dataset_filename = f\"{dataset}_heat_wave_days.zip\"\n",
    "#     dataset_filepath = os.path.join(download_folder, dataset_filename)\n",
    "\n",
    "#     # Download the dataset with the defined request parameters\n",
    "#     client.retrieve(dataset, request, dataset_filepath)\n",
    "\n",
    "# if __name__ == \"__main__\":\n",
    "#     client = main()\n",
    "#     main_retrieve()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a68363dc",
   "metadata": {},
   "source": [
    "### 2.2 Entpacken der heruntergeladenenen Zip-Datei"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "11c88a80-653e-4808-8573-eb03d4df3724",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ZIP-Datei wurde in das Verzeichnis .\\data\\sis-heat-and-cold-spells\\working entpackt\n"
     ]
    }
   ],
   "source": [
    "import zipfile\n",
    "\n",
    "# Erstellen Sie den Dateinamen und den Dateipfad für die ZIP-Datei des Datensatzes\n",
    "dataset_filename = f\"{dataset}_heat_wave_days.zip\"\n",
    "dataset_filepath = os.path.join(download_folder, dataset_filename)\n",
    "\n",
    "# Öffnen Sie die Zip-Datei im Lesemodus und extrahieren Sie den Inhalt in den Arbeitsordner\n",
    "with zipfile.ZipFile(dataset_filepath, 'r') as zip_ref:\n",
    "    zip_ref.extractall(working_folder)\n",
    "    \n",
    "print(f\"ZIP-Datei wurde in das Verzeichnis {working_folder} entpackt\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "51bd6db9",
   "metadata": {},
   "source": [
    "## 3. Datenverarbeitung und Visualisierung"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "becf8e76",
   "metadata": {},
   "source": [
    "### 3.1 Erfassung der verfügbaren RCP-Szenarios und der Statistiken\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "8d97a3cf-04e2-4e2f-b3db-fd357ef9f2e1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>filename</th>\n",
       "      <th>path</th>\n",
       "      <th>rcp</th>\n",
       "      <th>statistic</th>\n",
       "      <th>version</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>HWD_EU_climate_rcp45_mean_v1.0.nc</td>\n",
       "      <td>.\\data\\sis-heat-and-cold-spells\\working\\HWD_EU...</td>\n",
       "      <td>rcp45</td>\n",
       "      <td>mean</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>HWD_EU_climate_rcp45_stdev_v1.0.nc</td>\n",
       "      <td>.\\data\\sis-heat-and-cold-spells\\working\\HWD_EU...</td>\n",
       "      <td>rcp45</td>\n",
       "      <td>stdev</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>HWD_EU_climate_rcp85_mean_v1.0.nc</td>\n",
       "      <td>.\\data\\sis-heat-and-cold-spells\\working\\HWD_EU...</td>\n",
       "      <td>rcp85</td>\n",
       "      <td>mean</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>HWD_EU_climate_rcp85_stdev_v1.0.nc</td>\n",
       "      <td>.\\data\\sis-heat-and-cold-spells\\working\\HWD_EU...</td>\n",
       "      <td>rcp85</td>\n",
       "      <td>stdev</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                             filename  \\\n",
       "0   HWD_EU_climate_rcp45_mean_v1.0.nc   \n",
       "1  HWD_EU_climate_rcp45_stdev_v1.0.nc   \n",
       "2   HWD_EU_climate_rcp85_mean_v1.0.nc   \n",
       "3  HWD_EU_climate_rcp85_stdev_v1.0.nc   \n",
       "\n",
       "                                                path    rcp statistic version  \n",
       "0  .\\data\\sis-heat-and-cold-spells\\working\\HWD_EU...  rcp45      mean     1.0  \n",
       "1  .\\data\\sis-heat-and-cold-spells\\working\\HWD_EU...  rcp45     stdev     1.0  \n",
       "2  .\\data\\sis-heat-and-cold-spells\\working\\HWD_EU...  rcp85      mean     1.0  \n",
       "3  .\\data\\sis-heat-and-cold-spells\\working\\HWD_EU...  rcp85     stdev     1.0  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import re\n",
    "import pandas as pd\n",
    "\n",
    "# Alle verfügbaren .nc-Dateien erfassen und Metadaten aus Dateiname ableiten\n",
    "def meta(filename):\n",
    "    match = re.search(r'(rcp\\d{2})_(\\w+)_v(.*).nc', filename)\n",
    "    if not match:\n",
    "        raise ValueError(\"the given filename does not fit the expected naming scheme\")\n",
    "        \n",
    "    return dict(\n",
    "        filename = filename,\n",
    "        path = os.path.join(working_folder, filename),\n",
    "        rcp = match.group(1),\n",
    "        statistic = match.group(2),\n",
    "        version = match.group(3),\n",
    "    )\n",
    "\n",
    "# Beispielverzeichnis (angepasst an deine Umgebung)\n",
    "nc_files = [meta(f) for f in os.listdir(working_folder) if f.endswith('.nc')]\n",
    "df_nc_files = pd.DataFrame.from_dict(nc_files)\n",
    "df_nc_files"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2d7dc2af",
   "metadata": {},
   "source": [
    "### 3.2 netCDF in GeoTIFF umwandeln"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "b8be9c57-b3a9-4825-8edd-0cd82f1cce07",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Erstelle GeoTIFFs für rcp45/mean\n",
      "Erstelle GeoTIFFs für rcp45/stdev\n",
      "Erstelle GeoTIFFs für rcp85/mean\n",
      "Erstelle GeoTIFFs für rcp85/stdev\n"
     ]
    }
   ],
   "source": [
    "import rasterio\n",
    "from rasterio.crs import CRS\n",
    "from rasterio.transform import from_origin\n",
    "import netCDF4 as nc\n",
    "from netCDF4 import num2date\n",
    "import numpy as np\n",
    "import shutil\n",
    "\n",
    "variable_name = 'HWD_EU_climate'\n",
    "\n",
    "# Definiere das CRS (WGS84)\n",
    "crs = CRS.from_epsg(4326)\n",
    "\n",
    "# Schleife über alle Szenarien/Statistiken\n",
    "for nc_file in nc_files:\n",
    "    rcp = nc_file['rcp']\n",
    "    statistic = nc_file['statistic']\n",
    "    \n",
    "    print(f\"Erstelle GeoTIFFs für {rcp}/{statistic}\")\n",
    "\n",
    "    # NetCDF-Datei öffnen\n",
    "    ds = nc.Dataset(nc_file['path'])\n",
    "    lat = ds.variables['lat'][:]\n",
    "    lon = ds.variables['lon'][:]\n",
    "    time_var = ds.variables['time']\n",
    "    time_units = ds.variables['time'].units  # Zeit-Einheiten ablesen\n",
    "\n",
    "    # Bestimme die Pixelgröße und den Ursprung\n",
    "    pixel_size_lat = (lat.max() - lat.min()) / (len(lat) - 1)\n",
    "    pixel_size_lon = (lon.max() - lon.min()) / (len(lon) - 1)\n",
    "    transform = from_origin(lon.min(), lat.max(), pixel_size_lon, pixel_size_lat)\n",
    "\n",
    "    # Arbeitsordner für unprozessierte GeoTIFFs erstellen\n",
    "    unprocessed_dir = os.path.join(working_folder, f'tiff-{rcp}-{statistic}')\n",
    "    os.makedirs(unprocessed_dir, exist_ok=True)\n",
    "\n",
    "    # Schleife über alle Zeitdaten\n",
    "    for t in range(len(time_var)):\n",
    "        # Jahr aus der Zeitvariable extrahieren\n",
    "        year = int(num2date(time_var[t], time_units).year)\n",
    "\n",
    "        # Speichern als unprozessierter GeoTIFF\n",
    "        geotiff_path = os.path.join(unprocessed_dir, f'{variable_name}_{rcp}_{statistic}_{year}.tiff')\n",
    "        processed_path = os.path.join(geotiff_folder, f'{variable_name}_{rcp}_{statistic}_{year}_processed.tiff')\n",
    "        \n",
    "        # Überspringe, wenn die Dateien bereits existieren\n",
    "        if os.path.exists(geotiff_path) and os.path.exists(processed_path):\n",
    "            print(f\"GeoTIFFs für {year} existieren bereits. Überspringe.\")\n",
    "            continue\n",
    "        \n",
    "        # Daten für den aktuellen Zeitstempel lesen\n",
    "        data = ds.variables[variable_name][t, :, :]\n",
    "        \n",
    "        # Speichern als unprozessierter GeoTIFF, falls nicht existiert\n",
    "        if not os.path.exists(geotiff_path):\n",
    "            with rasterio.open(\n",
    "                geotiff_path,\n",
    "                'w',\n",
    "                driver='GTiff',\n",
    "                height=data.shape[0],\n",
    "                width=data.shape[1],\n",
    "                count=1,\n",
    "                dtype=data.dtype,\n",
    "                crs=crs,\n",
    "                transform=transform\n",
    "            ) as dst:\n",
    "                dst.write(data, 1)\n",
    "\n",
    "        # Bild um 180° drehen und von links nach rechts spiegeln\n",
    "        rotated_data = np.rot90(data, k=2)\n",
    "        flipped_data = np.fliplr(rotated_data)\n",
    "\n",
    "        # Speichern des bearbeiteten GeoTIFFs, falls nicht existiert\n",
    "        if not os.path.exists(processed_path):\n",
    "            with rasterio.open(\n",
    "                processed_path,\n",
    "                'w',\n",
    "                driver='GTiff',\n",
    "                height=flipped_data.shape[0],\n",
    "                width=flipped_data.shape[1],\n",
    "                count=1,\n",
    "                dtype=flipped_data.dtype,\n",
    "                crs=crs,\n",
    "                transform=transform\n",
    "            ) as dst:\n",
    "                dst.write(flipped_data, 1)\n",
    "\n",
    "    # Datei schließen\n",
    "    ds.close()\n",
    "\n",
    "    # Löschen des unprozessierten Ordners und seiner Inhalte\n",
    "    shutil.rmtree(unprocessed_dir)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ada87b02",
   "metadata": {},
   "source": [
    "### 3.3 netCDF in CSV umwandeln (Ausschnitt Deutschland)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f6f9a7fa-50f2-4e5e-a0db-c01944f092d3",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 4/4 [01:01<00:00, 15.33s/it]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Die Datei .\\data\\sis-heat-and-cold-spells\\csv\\sis-heat-and-cold-spells.csv.zip existiert bereits. Überspringe Erstellung.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>HWD_EU_climate-rcp45-mean</th>\n",
       "      <th>HWD_EU_climate-rcp45-stdev</th>\n",
       "      <th>HWD_EU_climate-rcp85-mean</th>\n",
       "      <th>HWD_EU_climate-rcp85-stdev</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>time</th>\n",
       "      <th>latitude</th>\n",
       "      <th>longitude</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">1986-01-01</th>\n",
       "      <th rowspan=\"5\" valign=\"top\">47.0</th>\n",
       "      <th>5.0</th>\n",
       "      <td>0.740421</td>\n",
       "      <td>1.332602</td>\n",
       "      <td>0.740421</td>\n",
       "      <td>0.997316</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5.1</th>\n",
       "      <td>0.781338</td>\n",
       "      <td>1.305503</td>\n",
       "      <td>0.781338</td>\n",
       "      <td>0.982611</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5.2</th>\n",
       "      <td>0.824017</td>\n",
       "      <td>1.293689</td>\n",
       "      <td>0.824017</td>\n",
       "      <td>0.934252</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5.3</th>\n",
       "      <td>0.824828</td>\n",
       "      <td>1.245492</td>\n",
       "      <td>0.824828</td>\n",
       "      <td>0.886260</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5.4</th>\n",
       "      <td>0.791667</td>\n",
       "      <td>1.157519</td>\n",
       "      <td>0.791667</td>\n",
       "      <td>0.830136</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <th>...</th>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">2085-01-01</th>\n",
       "      <th rowspan=\"5\" valign=\"top\">55.0</th>\n",
       "      <th>13.7</th>\n",
       "      <td>5.410092</td>\n",
       "      <td>2.420100</td>\n",
       "      <td>10.333487</td>\n",
       "      <td>2.151545</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13.8</th>\n",
       "      <td>5.457219</td>\n",
       "      <td>2.427997</td>\n",
       "      <td>10.392411</td>\n",
       "      <td>2.200505</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13.9</th>\n",
       "      <td>5.538381</td>\n",
       "      <td>2.417469</td>\n",
       "      <td>10.523212</td>\n",
       "      <td>2.215542</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14.0</th>\n",
       "      <td>5.535455</td>\n",
       "      <td>2.388092</td>\n",
       "      <td>10.512488</td>\n",
       "      <td>2.225050</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14.1</th>\n",
       "      <td>5.312610</td>\n",
       "      <td>2.171081</td>\n",
       "      <td>10.291465</td>\n",
       "      <td>2.247749</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>758700 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                               HWD_EU_climate-rcp45-mean  \\\n",
       "time       latitude longitude                              \n",
       "1986-01-01 47.0     5.0                         0.740421   \n",
       "                    5.1                         0.781338   \n",
       "                    5.2                         0.824017   \n",
       "                    5.3                         0.824828   \n",
       "                    5.4                         0.791667   \n",
       "...                                                  ...   \n",
       "2085-01-01 55.0     13.7                        5.410092   \n",
       "                    13.8                        5.457219   \n",
       "                    13.9                        5.538381   \n",
       "                    14.0                        5.535455   \n",
       "                    14.1                        5.312610   \n",
       "\n",
       "                               HWD_EU_climate-rcp45-stdev  \\\n",
       "time       latitude longitude                               \n",
       "1986-01-01 47.0     5.0                          1.332602   \n",
       "                    5.1                          1.305503   \n",
       "                    5.2                          1.293689   \n",
       "                    5.3                          1.245492   \n",
       "                    5.4                          1.157519   \n",
       "...                                                   ...   \n",
       "2085-01-01 55.0     13.7                         2.420100   \n",
       "                    13.8                         2.427997   \n",
       "                    13.9                         2.417469   \n",
       "                    14.0                         2.388092   \n",
       "                    14.1                         2.171081   \n",
       "\n",
       "                               HWD_EU_climate-rcp85-mean  \\\n",
       "time       latitude longitude                              \n",
       "1986-01-01 47.0     5.0                         0.740421   \n",
       "                    5.1                         0.781338   \n",
       "                    5.2                         0.824017   \n",
       "                    5.3                         0.824828   \n",
       "                    5.4                         0.791667   \n",
       "...                                                  ...   \n",
       "2085-01-01 55.0     13.7                       10.333487   \n",
       "                    13.8                       10.392411   \n",
       "                    13.9                       10.523212   \n",
       "                    14.0                       10.512488   \n",
       "                    14.1                       10.291465   \n",
       "\n",
       "                               HWD_EU_climate-rcp85-stdev  \n",
       "time       latitude longitude                              \n",
       "1986-01-01 47.0     5.0                          0.997316  \n",
       "                    5.1                          0.982611  \n",
       "                    5.2                          0.934252  \n",
       "                    5.3                          0.886260  \n",
       "                    5.4                          0.830136  \n",
       "...                                                   ...  \n",
       "2085-01-01 55.0     13.7                         2.151545  \n",
       "                    13.8                         2.200505  \n",
       "                    13.9                         2.215542  \n",
       "                    14.0                         2.225050  \n",
       "                    14.1                         2.247749  \n",
       "\n",
       "[758700 rows x 4 columns]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "from netCDF4 import Dataset, num2date\n",
    "from tqdm import tqdm\n",
    "\n",
    "# Definiere Ausschnitt; hier Deutschland\n",
    "lat_min, lat_max = 47, 55\n",
    "lon_min, lon_max = 5, 15\n",
    "variable_name = 'HWD_EU_climate'\n",
    "\n",
    "# Funktion zum Umwandeln von netCDF in CSV\n",
    "def netcdf_to_dataframe(nc_file):\n",
    "    # Öffne die netCDF Datei\n",
    "    dataset = Dataset(nc_file['path'], 'r')\n",
    "    \n",
    "    # Überprüfe, ob die Variable und 'time' in der Datei vorhanden sind\n",
    "    if variable_name in dataset.variables and 'time' in dataset.variables:\n",
    "        temperature = dataset.variables[variable_name][:]\n",
    "        time = dataset.variables['time'][:]\n",
    "        lat = dataset.variables['lat'][:]\n",
    "        lon = dataset.variables['lon'][:]\n",
    "        \n",
    "        # Konvertiere die Zeit in ein lesbares Format\n",
    "        time_units = dataset.variables['time'].units\n",
    "        time_calendar = dataset.variables['time'].calendar if hasattr(dataset.variables['time'], 'calendar') else 'standard'\n",
    "        time = num2date(time, units=time_units, calendar=time_calendar)\n",
    "\n",
    "        # Finde die Indizes, die in den definierten Ausschnitt fallen (lat_min und lon_min werden vorausgesetzt)\n",
    "        lat_indices = (lat >= lat_min) & (lat <= lat_max)\n",
    "        lon_indices = (lon >= lon_min) & (lon <= lon_max)\n",
    "        \n",
    "        # Filtere den Ausschnitt\n",
    "        filtered_lat = lat[lat_indices]\n",
    "        filtered_lon = lon[lon_indices]\n",
    "        filtered_temperature = temperature[:, lat_indices, :][:, :, lon_indices]\n",
    "\n",
    "        # Erstelle den Spaltennamen mit Variable, RCP und Statistik\n",
    "        variable_column_name = f\"{variable_name}-{nc_file['rcp']}-{nc_file['statistic']}\"\n",
    "        \n",
    "        # Erstelle eine Liste von Einträgen für das DataFrame\n",
    "        rows = []\n",
    "        for t in range(filtered_temperature.shape[0]):\n",
    "            for i in range(filtered_temperature.shape[1]):\n",
    "                for j in range(filtered_temperature.shape[2]):\n",
    "                    if not filtered_temperature.mask[t, i, j]:\n",
    "                        rows.append({\n",
    "                            'time': time[t],\n",
    "                            'latitude': filtered_lat[i],\n",
    "                            'longitude': filtered_lon[j],\n",
    "                            variable_column_name: filtered_temperature[t, i, j]\n",
    "                        })\n",
    "        \n",
    "        # Erstelle ein DataFrame aus den Einträgen\n",
    "        df = pd.DataFrame(rows)\n",
    "        df['time'] = pd.to_datetime(df['time'].map(str))\n",
    "        df['latitude'] = pd.to_numeric(df['latitude'])\n",
    "        df['longitude'] = pd.to_numeric(df['longitude'])\n",
    "        df[variable_column_name] = pd.to_numeric(df[variable_column_name])\n",
    "        \n",
    "        # Setze den Index auf time, latitude und longitude\n",
    "        return df.set_index(['time', 'latitude', 'longitude'])\n",
    "    else:\n",
    "        # Zugriff auf das nc_file Dictionary separat aufgelöst\n",
    "        path = nc_file['path']\n",
    "        raise ValueError(f\"Variables not found in {path}\")\n",
    "    \n",
    "    # Schließe das Dataset\n",
    "    dataset.close()\n",
    "\n",
    "# Durchlaufe Szenarien/Statistiken\n",
    "dataframes = [netcdf_to_dataframe(nc_file) for nc_file in tqdm(nc_files)]\n",
    "\n",
    "# Kombiniere alle Daten in eine Tabelle\n",
    "df = pd.concat(dataframes, axis=1)\n",
    "\n",
    "# Erstelle das Ausgabe-Verzeichnis, falls es nicht existiert\n",
    "csv_path = os.path.join(csv_folder, 'sis-heat-and-cold-spells.csv.zip')\n",
    "\n",
    "if not os.path.exists(csv_path):\n",
    "    # Schreibe CSV\n",
    "    df.to_csv(csv_path, sep=',', encoding='utf8', compression='zip')\n",
    "    print(f\"Die Datei wurde erfolgreich erstellt: {csv_path}\")\n",
    "else:\n",
    "    # Überprüfe, ob die CSV-Datei bereits existiert\n",
    "    print(f\"Die Datei {csv_path} existiert bereits. Überspringe Erstellung.\")\n",
    "    \n",
    "# Zeige den DataFrame an\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "26ca4b57",
   "metadata": {},
   "source": [
    "### 3.4 Filtern der Daten für Konstanz"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "3be97dc1-2ad0-4552-80b1-6d7002ea702b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>time</th>\n",
       "      <th>longitude</th>\n",
       "      <th>latitude</th>\n",
       "      <th>variable</th>\n",
       "      <th>scenario</th>\n",
       "      <th>mean</th>\n",
       "      <th>stdev</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1986-01-01</td>\n",
       "      <td>9.2</td>\n",
       "      <td>47.7</td>\n",
       "      <td>HWD_EU_climate</td>\n",
       "      <td>rcp45</td>\n",
       "      <td>0.664428</td>\n",
       "      <td>1.237293</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1986-01-01</td>\n",
       "      <td>9.2</td>\n",
       "      <td>47.7</td>\n",
       "      <td>HWD_EU_climate</td>\n",
       "      <td>rcp85</td>\n",
       "      <td>0.664428</td>\n",
       "      <td>0.864754</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1987-01-01</td>\n",
       "      <td>9.2</td>\n",
       "      <td>47.7</td>\n",
       "      <td>HWD_EU_climate</td>\n",
       "      <td>rcp45</td>\n",
       "      <td>0.820577</td>\n",
       "      <td>1.237293</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1987-01-01</td>\n",
       "      <td>9.2</td>\n",
       "      <td>47.7</td>\n",
       "      <td>HWD_EU_climate</td>\n",
       "      <td>rcp85</td>\n",
       "      <td>0.820577</td>\n",
       "      <td>0.864754</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1988-01-01</td>\n",
       "      <td>9.2</td>\n",
       "      <td>47.7</td>\n",
       "      <td>HWD_EU_climate</td>\n",
       "      <td>rcp45</td>\n",
       "      <td>0.956149</td>\n",
       "      <td>1.237293</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>195</th>\n",
       "      <td>2083-01-01</td>\n",
       "      <td>9.2</td>\n",
       "      <td>47.7</td>\n",
       "      <td>HWD_EU_climate</td>\n",
       "      <td>rcp85</td>\n",
       "      <td>14.551274</td>\n",
       "      <td>6.499632</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>196</th>\n",
       "      <td>2084-01-01</td>\n",
       "      <td>9.2</td>\n",
       "      <td>47.7</td>\n",
       "      <td>HWD_EU_climate</td>\n",
       "      <td>rcp45</td>\n",
       "      <td>5.383126</td>\n",
       "      <td>2.383281</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>197</th>\n",
       "      <td>2084-01-01</td>\n",
       "      <td>9.2</td>\n",
       "      <td>47.7</td>\n",
       "      <td>HWD_EU_climate</td>\n",
       "      <td>rcp85</td>\n",
       "      <td>14.922153</td>\n",
       "      <td>6.499632</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>198</th>\n",
       "      <td>2085-01-01</td>\n",
       "      <td>9.2</td>\n",
       "      <td>47.7</td>\n",
       "      <td>HWD_EU_climate</td>\n",
       "      <td>rcp45</td>\n",
       "      <td>5.325729</td>\n",
       "      <td>2.383281</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>199</th>\n",
       "      <td>2085-01-01</td>\n",
       "      <td>9.2</td>\n",
       "      <td>47.7</td>\n",
       "      <td>HWD_EU_climate</td>\n",
       "      <td>rcp85</td>\n",
       "      <td>15.144990</td>\n",
       "      <td>6.499632</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>200 rows × 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          time  longitude  latitude        variable scenario       mean  \\\n",
       "0   1986-01-01        9.2      47.7  HWD_EU_climate    rcp45   0.664428   \n",
       "1   1986-01-01        9.2      47.7  HWD_EU_climate    rcp85   0.664428   \n",
       "2   1987-01-01        9.2      47.7  HWD_EU_climate    rcp45   0.820577   \n",
       "3   1987-01-01        9.2      47.7  HWD_EU_climate    rcp85   0.820577   \n",
       "4   1988-01-01        9.2      47.7  HWD_EU_climate    rcp45   0.956149   \n",
       "..         ...        ...       ...             ...      ...        ...   \n",
       "195 2083-01-01        9.2      47.7  HWD_EU_climate    rcp85  14.551274   \n",
       "196 2084-01-01        9.2      47.7  HWD_EU_climate    rcp45   5.383126   \n",
       "197 2084-01-01        9.2      47.7  HWD_EU_climate    rcp85  14.922153   \n",
       "198 2085-01-01        9.2      47.7  HWD_EU_climate    rcp45   5.325729   \n",
       "199 2085-01-01        9.2      47.7  HWD_EU_climate    rcp85  15.144990   \n",
       "\n",
       "        stdev  \n",
       "0    1.237293  \n",
       "1    0.864754  \n",
       "2    1.237293  \n",
       "3    0.864754  \n",
       "4    1.237293  \n",
       "..        ...  \n",
       "195  6.499632  \n",
       "196  2.383281  \n",
       "197  6.499632  \n",
       "198  2.383281  \n",
       "199  6.499632  \n",
       "\n",
       "[200 rows x 7 columns]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Filtern und Index für die gewünschte Position setzen\n",
    "kn = (\n",
    "    df\n",
    "    .query('latitude == 47.7 and longitude == 9.200000000000003')\n",
    "    .reset_index()\n",
    "    .set_index('time')\n",
    ")\n",
    "\n",
    "# Transformation von Breit- zu Längsformat vorbereiten\n",
    "kn_long = (\n",
    "    kn\n",
    "    .reset_index()\n",
    "    .melt(id_vars=['time', 'longitude', 'latitude'],\n",
    "          var_name='full_variable',\n",
    "          value_name='value'\n",
    "    )\n",
    "    .assign(\n",
    "        variable=lambda x: x.full_variable.str.split('-', expand=True)[0],  # Extract 'variable' part\n",
    "        rcp=lambda x: x.full_variable.str.split('-', expand=True)[1],       # Extract 'rcp' part\n",
    "        statistic=lambda x: x.full_variable.str.split('-', expand=True)[2]  # Extract 'statistic' part\n",
    "    )\n",
    "    .drop(columns=['full_variable'])  # Drop the temporary column\n",
    "    # Statistikspalten in separate Spalten umwandeln\n",
    "    .pivot_table(\n",
    "        index=['time', 'longitude', 'latitude', 'variable', 'rcp'],\n",
    "        columns='statistic',\n",
    "        values='value',\n",
    "        aggfunc='first'\n",
    "    )\n",
    "    .reset_index()\n",
    ")\n",
    "\n",
    "# Spalten umbenennen\n",
    "kn_long.columns.name = None \n",
    "kn_long = kn_long.rename(columns={'rcp': 'scenario', 'mean': 'mean', 'stdev': 'stdev'})\n",
    "\n",
    "kn_long"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f54606da",
   "metadata": {},
   "source": [
    "### 3.5 Plotten der Daten (3.4 kn_long)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "80f8e7f3-a6f6-499e-be9a-0fb651ccaa4e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1100x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "from matplotlib.dates import YearLocator\n",
    "import matplotlib.ticker as ticker\n",
    "\n",
    "# plt.rcParams['font.family'] = 'Calibri'\n",
    "\n",
    "# Erstelle die Figur und die Achsen\n",
    "fig, ax = plt.subplots(figsize=(11, 6), facecolor='#f1f1f1', edgecolor='k')\n",
    "\n",
    "# Plotten der Daten für jedes Szenario\n",
    "for scenario in kn_long['scenario'].drop_duplicates():\n",
    "    # Daten für das aktuelle Szenario filtern\n",
    "    scenario_data = kn_long.query(f'scenario == \"{scenario}\"')\n",
    "    x = scenario_data['time']\n",
    "    y = scenario_data['mean']\n",
    "    err = scenario_data['stdev']\n",
    "    \n",
    "    ax.plot(x, y, label=f'{scenario} - Mittelwert')\n",
    "    ax.fill_between(x, y - err, y + err, alpha=0.15, label=f'{scenario} - Standardabweichung')\n",
    "\n",
    "# Titel und Achsenbeschriftungen hinzufügen\n",
    "ax.set_xlabel(\"Jahr\", fontsize=12)\n",
    "ax.set_ylabel(\"Tage\", fontsize=12)\n",
    "ax.set_title('Erwartete Hitzewellentage pro Jahr in Konstanz', fontsize=14, fontweight='bold')\n",
    "\n",
    "# Einschränkung der x-Achse auf den gewünschten Zeitraum\n",
    "ax.set_xlim(pd.Timestamp('1986-01-01'), pd.Timestamp('2085-01-01'))\n",
    "ax.xaxis.set_minor_locator(YearLocator())\n",
    "ax.set_ylim(-2,25)\n",
    "ax.yaxis.set_minor_locator(ticker.AutoMinorLocator())\n",
    "ax.tick_params(axis='x', which='major', length=4, direction='inout', width=2) \n",
    "ax.tick_params(axis='x', which='minor', length=3, direction='inout') \n",
    "\n",
    "# Füge ein Gitternetz hinzu\n",
    "ax.grid(visible=True, color='#b0b0b0', linestyle='--', linewidth=0.8, alpha=0.6)\n",
    "ax.yaxis.set_major_formatter(ticker.FormatStrFormatter('%0.2f'))\n",
    "\n",
    "# Legende mit Titel platzieren\n",
    "ax.legend(loc=\"upper left\", title='Szenario', title_fontsize=12, fontsize=10)\n",
    "\n",
    "# Beschreibung und Quelle hinzufügen\n",
    "plt.figtext(0.5, -0.05, \n",
    "            'Beschreibung: Anzahl der durchschnittliche Hitzewellentage pro Jahr.\\n'\n",
    "            'Quelle: Hooyberghs, H., Berckmans, J., Lefebre, F., De Ridder, K. (2019): Heat waves and cold spells in Europe derived from climate projections. Copernicus Climate Change Service (C3S) Climate Data Store (CDS). DOI: 10.24381/cds.9e7ca677 (Accessed on 14-10-2024)', \n",
    "            ha='left', va='center', fontsize=9, wrap=True, backgroundcolor='w')\n",
    "\n",
    "# Diagramm\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "be613b8d",
   "metadata": {},
   "source": [
    "### 3.6  Animiertes GIF erstellen: Jeden Zeitschritt in ein TIFF exportieren"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "8c70a301-5eae-40a2-8fe0-c9406e1676ca",
   "metadata": {},
   "outputs": [
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'mpl_toolkits.basemap'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[11], line 7\u001b[0m\n\u001b[0;32m      5\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mnumpy\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m \u001b[38;5;21;01mnp\u001b[39;00m\n\u001b[0;32m      6\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mdatetime\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m datetime\n\u001b[1;32m----> 7\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mmpl_toolkits\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mbasemap\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m Basemap\n\u001b[0;32m      9\u001b[0m \u001b[38;5;66;03m# Definiere netCDF-Dateipfad und Ausgabeverzeichnis global\u001b[39;00m\n\u001b[0;32m     10\u001b[0m nc_filename \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mHWD_EU_climate_rcp45_mean_v1.0.nc\u001b[39m\u001b[38;5;124m\"\u001b[39m\n",
      "\u001b[1;31mModuleNotFoundError\u001b[0m: No module named 'mpl_toolkits.basemap'"
     ]
    }
   ],
   "source": [
    "import matplotlib as mpl\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.patheffects as path_effects  \n",
    "import netCDF4 as nc\n",
    "import numpy as np\n",
    "from datetime import datetime\n",
    "from mpl_toolkits.basemap import Basemap\n",
    "\n",
    "# Definiere netCDF-Dateipfad und Ausgabeverzeichnis global\n",
    "nc_filename = \"HWD_EU_climate_rcp45_mean_v1.0.nc\"\n",
    "nc_filepath = os.path.join(working_folder, nc_filename)\n",
    "\n",
    "variable_name = 'HWD_EU_climate'\n",
    "\n",
    "def create_map(lat, lon, data, title, output_path, cmap, vmin, vmax, plot_type='contourf'):\n",
    "    fig = plt.figure(figsize=(12, 10))\n",
    "\n",
    "    try:\n",
    "        # Erstelle eine Basemap für Deutschland\n",
    "        m = Basemap(projection='merc', llcrnrlat=47.3, urcrnrlat=55.0,\n",
    "                    llcrnrlon=5.9, urcrnrlon=15.0, resolution='i')\n",
    "\n",
    "        # Hinzufügen von Flüssen, Küstenlinien und Ländergrenzen\n",
    "        m.drawrivers(color='blue', linewidth=0.3)\n",
    "        m.drawcoastlines(linewidth=0.7)\n",
    "        m.drawcountries(linewidth=0.7)\n",
    "        m.drawstates(linewidth=0.5)\n",
    "        m.drawmapboundary(fill_color='#DBE9F7')  # Hintergrundfarbe\n",
    "\n",
    "        # Plot der Daten\n",
    "        lon, lat = np.meshgrid(lon, lat)\n",
    "        x, y = m(lon, lat)\n",
    "        data_masked = np.ma.masked_invalid(data)\n",
    "        cmap.set_bad(color=(0, 0, 0, 0))  # Setze ungültige Werte transparent\n",
    "\n",
    "        if plot_type == 'contourf':\n",
    "            m.contourf(x, y, data_masked, cmap=cmap, vmin=vmin, vmax=vmax)\n",
    "        elif plot_type == 'imshow':\n",
    "            m.imshow(data_masked, extent=[lon.min(), lon.max(), lat.min(), lat.max()],\n",
    "                     origin='lower', aspect='auto', cmap=cmap, vmin=vmin, vmax=vmax)\n",
    "\n",
    "        # Koordinaten der deutschen Großstädte\n",
    "        cities = [\n",
    "            ('Berlin', 52.520, 13.405, -20000, 20000),\n",
    "            ('Hamburg', 53.551, 9.993, -20000, 20000),\n",
    "            ('München', 48.135, 11.582, -20000, 20000),\n",
    "            ('Stuttgart', 48.775, 9.182, -20000, 20000),\n",
    "            ('Düsseldorf', 51.225, 6.776, -1000, 20000),\n",
    "            ('Wiesbaden', 50.082, 8.241, -20000, 20000),\n",
    "            ('Schwerin', 53.635, 11.412, -20000, 20000),\n",
    "            ('Hannover', 52.374, 9.738, -20000, 20000),\n",
    "            ('Saarbrücken', 49.234, 6.997, -20000, 20000),\n",
    "            ('Dresden', 51.050, 13.737, -20000, 20000),\n",
    "            ('Magdeburg', 52.120, 11.629, -50000, -40000),\n",
    "            ('Kiel', 54.323, 10.139, -30000, -35000),\n",
    "            ('Erfurt', 50.978, 11.029, -20000, 20000),\n",
    "            ('Bremen', 53.075, 8.807, -20000, 20000),\n",
    "            ('Potsdam', 52.390, 13.064, -50000, -30000),\n",
    "            ('Mainz', 50.000, 8.271, -55000, -30000),        ]\n",
    "\n",
    "        # Städte auf der Karte plotten\n",
    "        for city, lat_city, lon_city, x_offset, y_offset in cities:\n",
    "            x, y = m(lon_city, lat_city)\n",
    "            m.plot(x, y, 'ko', markersize=4)  # Markerfarbe Schwarz und Größe erhöhen\n",
    "            txt = plt.text(x + x_offset, y + y_offset, city, fontsize=9, ha='left', color='black')\n",
    "            txt.set_path_effects([path_effects.withStroke(linewidth=1.5, foreground='white', alpha=0.5)])\n",
    "\n",
    "       # Füge einen Titel hinzu\n",
    "        plt.suptitle(title, fontsize=18)\n",
    "        plt.subplots_adjust(top=0.94)\n",
    "\n",
    "        # Colorbar anpassen\n",
    "        cbar_ax = plt.gcf().add_axes([0.80, 0.11, 0.04, 0.82])\n",
    "        cb = mpl.colorbar.ColorbarBase(cbar_ax, cmap=cmap, norm=mpl.colors.Normalize(vmin=vmin, vmax=vmax), orientation='vertical')\n",
    "        cb.set_label('Eignung (%)', size=12)\n",
    "\n",
    "        plt.savefig(output_path, bbox_inches='tight', pad_inches=0.1)\n",
    "        plt.close()\n",
    "    except Exception as e:\n",
    "        print(f\"Fehler beim Erstellen des Plots für {title}: {e}\")\n",
    "\n",
    "def main():\n",
    "    os.makedirs(output_folder, exist_ok=True)\n",
    "\n",
    "    dataset = nc.Dataset(nc_filepath)\n",
    "    time_var = dataset.variables['time']\n",
    "    time_units = time_var.units\n",
    "    time_data = nc.num2date(time_var[:], units=time_units)\n",
    "\n",
    "    # Datenvariable\n",
    "    data_var = dataset.variables[variable_name][:]\n",
    "\n",
    "    # Finde den globalen Minimal- und Maximalwert der gesamten Datenvariable\n",
    "    global_min = np.nanmin(data_var)\n",
    "    global_max = np.nanmax(data_var)\n",
    "\n",
    "    print(f\"Globaler Minimum-Wert: {global_min}\")\n",
    "    print(f\"Globaler Maximum-Wert: {global_max}\")\n",
    "\n",
    "    # Verwende die benutzerdefinierte Colormap\n",
    "    cmap = mpl.colormaps['Reds']\n",
    "    #vmin, vmax = global_min, global_max\n",
    "    vmin, vmax = 0, 20\n",
    "\n",
    "    for year in range(1986, 2086):\n",
    "        desired_time = datetime(year, 1, 1, 0)\n",
    "        try:\n",
    "            time_index = np.where(time_data == desired_time)[0][0]\n",
    "        except IndexError:\n",
    "            print(f\"Zeitpunkt {desired_time} nicht gefunden, überspringe Jahr {year}\")\n",
    "            continue\n",
    "\n",
    "        print(year)\n",
    "\n",
    "        data = dataset.variables[variable_name][time_index, :, :]\n",
    "        lat = dataset.variables['lat'][:]\n",
    "        lon = dataset.variables['lon'][:]\n",
    "\n",
    "        if np.isnan(data).any() or np.isinf(data).any():\n",
    "            print(f\"Ungültige Werte in den Daten für {desired_time}, überspringe Jahr {year}\")\n",
    "            continue\n",
    "\n",
    "        data_min = np.min(data)\n",
    "        data_max = np.max(data)\n",
    "        if data_min == data_max:\n",
    "            print(f\"Konstante Werte in den Daten für {desired_time}, überspringe Jahr {year}\")\n",
    "            continue\n",
    "\n",
    "        create_map(lat, lon, data, f'Jahr {desired_time.year} - RCP8.5',\n",
    "                   os.path.join(output_folder, f'{variable_name}_{year}.png'),\n",
    "                   cmap, vmin, vmax, plot_type='contourf')\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "37f46aa7",
   "metadata": {},
   "source": [
    "### 3.7 Aus den TIFFs ein GIF erstellen"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bfbbc2bc-4de9-4fbf-a823-dbd0121187c4",
   "metadata": {},
   "outputs": [],
   "source": [
    "from PIL import Image\n",
    "import imageio\n",
    "\n",
    "# Name der Ausgabedatei\n",
    "output_gif = f'{variable_name}_RCP85.gif'\n",
    "gif_path = os.path.join(output_folder, output_gif)\n",
    "\n",
    "# Liste der PNG-Bilder sortieren\n",
    "images = []\n",
    "for year in range(1986, 2086):  # Anpassen, wenn Sie mehr Jahre haben\n",
    "    file_path = os.path.join(output_folder, f'{variable_name}_{year}.png')\n",
    "    if os.path.exists(file_path):\n",
    "        image = Image.open(file_path)\n",
    "        images.append(image)\n",
    "\n",
    "# Erstellen des GIFs\n",
    "images[0].save(gif_path, format='GIF', append_images=images[1:],\n",
    "               save_all=True, duration=400, loop=0)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "cds_venv",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.0"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {},
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
